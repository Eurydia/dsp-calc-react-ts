import{j as e,r as m}from"./react-Sar4E4mQ.js";/* empty css                    */import{c as ke}from"./react-dom-DU7QB3Dn.js";import{s as ne,P as oe,T as Le,I as V,G as P,a as E,R as _,b as _e,c as ee,S as j,d as B,C as We,E as Ue,e as De,M as T,L as F,f as S,g as q,h as g,i as se,j as ce,k as ie,l as ae,m as w,B as Ge,F as A,n as W,o as U,p as D,q as N,D as $e,r as Ye,A as Be,t as z,u as ze,v as qe,U as Ke,w as Xe,x as He,y as Je,z as Qe,H as Ze,J as Ve}from"./@mui-CVtSVz4Z.js";import{F as le,R as K,P as X,S as de,a as ue,G as et}from"./@eurydos-DnVMgPJD.js";import"./@babel-C_EpdgtF.js";import"./scheduler-CzFDRTuY.js";import"./@emotion-CZ7KtgBx.js";import"./hoist-non-react-statics-DQogQWOa.js";import"./stylis-FDnFs_-n.js";import"./clsx-B-dksMZM.js";import"./react-transition-group-CUJd1eX4.js";import"./react-is-DcfIKM1A.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))c(r);new MutationObserver(r=>{for(const s of r)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&c(i)}).observe(document,{childList:!0,subtree:!0});function o(r){const s={};return r.integrity&&(s.integrity=r.integrity),r.referrerPolicy&&(s.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?s.credentials="include":r.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function c(r){if(r.ep)return;r.ep=!0;const s=o(r);fetch(r.href,s)}})();const I=t=>`./images/${t.replaceAll(" ","_").toLowerCase()}.webp`,pe=t=>{switch(t.sprayCount){case 12:return"./images/proliferator_mk.i.webp";case 24:return"./images/proliferator_mk.ii.webp";case 60:return"./images/proliferator_mk.iii.webp"}return"./images/none.webp"},x=ne(oe)(({theme:t})=>({padding:t.spacing(2),display:"flex",flexDirection:"column",gap:t.spacing(2)})),G=t=>{const{placeholder:n,disabled:o,maxLength:c,prefix:r,suffix:s,label:i,value:a,onChange:l}=t,u=d=>{const p=d.target.value.slice(0,c).normalize();l(p)};return e.jsx(Le,{fullWidth:!0,placeholder:n,disabled:o,label:i,value:a,onChange:u,InputProps:{startAdornment:e.jsx(V,{position:"start",children:r}),endAdornment:e.jsx(V,{position:"end",children:s})}})},tt=t=>{const{data:n,handlers:o}=t,c=(a,l)=>{o.handleComputeModeChange(l)},r=n.computeMode==="0"?n.constraint:n.capacity,s=n.computeMode==="0"?o.handleConstraintUpdate:o.handleCapacityUpdate,i=Object.entries(r).map(([a,l])=>e.jsxs(P,{item:!0,xs:12,md:6,display:"flex",alignItems:"center",children:[e.jsx(G,{label:a,maxLength:6,suffix:"/min",prefix:e.jsx("img",{alt:a,src:I(a)}),value:l,onChange:u=>s(a,u)}),e.jsx(E,{size:"small",color:"primary",children:e.jsx(_,{}),onClick:()=>s(a,"")})]},a));return e.jsxs(x,{square:!0,elevation:2,children:[e.jsxs(_e,{value:n.computeMode,onChange:c,children:[e.jsx(ee,{disableRipple:!0,label:"Constraint",value:"0"}),e.jsx(ee,{disableRipple:!0,label:"Capacity",value:"1"})]}),e.jsx(P,{container:!0,spacing:2,children:i})]})},O=t=>{const{title:n,children:o}=t,[c,r]=m.useState(!1),s=()=>{r(!c)},i=c?e.jsx(Ue,{}):e.jsx(De,{});return e.jsxs(m.Fragment,{children:[e.jsxs(j,{direction:"row",alignItems:"center",justifyContent:"space-between",children:[e.jsx(B,{fontWeight:"500",fontSize:"large",color:"secondary.main",children:n}),e.jsx(E,{disableRipple:!0,size:"small",color:"primary",onClick:s,children:i})]}),e.jsx(We,{in:!c,children:e.jsx(j,{spacing:2,children:o})})]})},H=t=>le.get(t),rt=()=>[...le.values()],nt=t=>{for(const n of K.values())if(n.recipeType===t)return n},J=t=>K.get(t),ot=()=>[...K.values()],$=t=>X.get(t),st=()=>[...X.values()],ct=t=>{for(const n of X.values())if(n.mode===t)return n},it=()=>[...de.values()],me=t=>de.get(t),at=t=>{const{onChange:n,value:o}=t,{current:c}=m.useRef(rt()),r=i=>{const a=H(i.target.value);a!==void 0&&n(a)},s=c.map(({label:i})=>e.jsxs(T,{value:i,disableRipple:!0,children:[e.jsx(F,{children:e.jsx("img",{src:I(i),alt:i})}),e.jsx(S,{children:i})]},i));return e.jsx(q,{size:"small",value:o.label,onChange:r,SelectDisplayProps:{style:{display:"flex",alignItems:"center"}},children:s})},lt=t=>{const n=()=>{s(r,"")},o=i=>{s(r,i)},{value:c,label:r,onChange:s}=t;return e.jsxs(j,{direction:"row",alignItems:"center",children:[e.jsx(G,{label:r,maxLength:6,value:c,suffix:"/min",onChange:o,prefix:e.jsx("img",{alt:r,src:I(r)})}),e.jsx(E,{disableRipple:!0,size:"small",color:"primary",children:e.jsx(_,{}),onClick:n})]})},dt=t=>{const{defaultValue:n,disabled:o,onChange:c,value:r}=t,s=()=>{c(n)};return e.jsxs(j,{direction:"row",alignItems:"center",children:[e.jsx(G,{disabled:o,placeholder:n,maxLength:6,label:"Spray Count",value:r,onChange:c,suffix:"sprays"}),e.jsx(E,{disableRipple:!0,disabled:o,size:"small",color:"primary",children:e.jsx(_,{}),onClick:s})]})},ut=t=>{const{onChange:n,value:o,speedupOnly:c}=t,{current:r}=m.useRef(st()),s=d=>{const p=$(d.target.value);p!==void 0&&n(p)},i=[],a=[];for(const d of r)c&&d.mode===ue.EXTRA_PRODUCTS?a.push(d):i.push(d);const l=i.map(d=>{const{label:p}=d;return e.jsxs(T,{value:p,disableRipple:!0,children:[p!=="None"&&e.jsx(F,{children:e.jsx("img",{src:pe(d),alt:p})}),e.jsx(S,{children:p})]},p)}),u=a.map(({label:d})=>e.jsx(T,{disabled:!0,value:d,disableRipple:!0,children:e.jsx(S,{children:d})},d));return e.jsxs(q,{size:"small",value:o.label,onChange:s,SelectDisplayProps:{style:{display:"flex",alignItems:"center"}},children:[l,u]})},pt=t=>{const{onChange:n,value:o,recipeType:c}=t,{current:r}=m.useRef(ot()),s=d=>{const p=J(d.target.value);p!==void 0&&n(p)},i=[],a=[];for(const d of r)d.recipeType===c?i.push(d):a.push(d);const l=i.map(({label:d})=>e.jsxs(T,{value:d,disableRipple:!0,children:[e.jsx(F,{children:e.jsx("img",{src:I(d),alt:d})}),e.jsx(S,{children:d})]},d)),u=a.map(({label:d})=>e.jsx(T,{disabled:!0,value:d,disableRipple:!0,children:e.jsx(S,{children:d})},d));return e.jsxs(q,{size:"small",value:o.label,onChange:s,SelectDisplayProps:{style:{display:"flex",alignItems:"center"}},children:[l,u]})},mt=t=>{const{prefix:n,suffix:o,value:c,label:r,onChange:s}=t,i=()=>{s(r,"")},a=l=>{s(r,l)};return e.jsxs(j,{direction:"row",alignItems:"center",children:[e.jsx(G,{label:r,maxLength:6,value:c,onChange:a,suffix:o,prefix:n}),e.jsx(E,{disableTouchRipple:!0,size:"small",color:"primary",children:e.jsx(_,{}),onClick:i})]})},ft=t=>{const{data:n,handlers:o}=t,c=Object.entries(n.flowrate).map(([s,i])=>e.jsx(lt,{value:i,label:s,onChange:o.handleFlowrateChange},s)),r=Object.entries(n.sorter).map(([s,i])=>e.jsx(mt,{prefix:e.jsx("img",{src:I(s),alt:s}),label:s,value:i,onChange:o.handleSorterChange},s));return e.jsxs(j,{spacing:2,children:[e.jsx(B,{fontWeight:"600",fontSize:"x-large",color:"secondary.main",children:"Configuration"}),e.jsxs(B,{fontWeight:"400",fontSize:"small",children:["DSP version: ",et]}),e.jsxs(O,{title:"Manufacturing",children:[e.jsx(at,{value:n.facility,onChange:o.handleFacilityChange}),e.jsx(pt,{value:n.recipe,onChange:o.handleRecipeChange,recipeType:n.facility.recipeType})]}),e.jsx(O,{title:"Transport capacity",children:e.jsx(j,{spacing:1,children:c})}),e.jsxs(O,{title:"Proliferation",children:[e.jsx(ut,{value:n.proliferator,speedupOnly:n.recipe.speedupOnly,onChange:o.handleProliferatorChange}),e.jsx(dt,{defaultValue:n.proliferator.sprayCount.toString(),value:n.proliferatorSprayCount,disabled:n.proliferator.label==="None",onChange:o.handleProliferatorSprayCountChange})]}),e.jsx(O,{title:"Sorter connections",children:e.jsx(j,{spacing:1,children:r})})]})},b=ne(g)(({theme:t})=>({color:t.palette.secondary.main})),ht=new Intl.NumberFormat("en-US",{maximumSignificantDigits:6,signDisplay:"exceptZero"}),C=t=>ht.format(t),te=t=>{const{label:n,perArray:o,perFacility:c,perTotal:r}=t,i=[r,o,c].map((l,u)=>e.jsx(g,{colSpan:1,align:"right",children:C(l)},`${n}-${u}`));let a=I(n);if(n.includes("(materials)")||n.includes("(products)")){const l=$(n.replaceAll("(materials)","").replaceAll("(products)","").trim());l!==void 0&&(a=pe(l))}return e.jsxs(w,{children:[e.jsx(g,{colSpan:1,sx:{display:"flex",justifyContent:"center"},children:e.jsx("img",{alt:n,src:a})}),e.jsx(g,{colSpan:2,children:n}),i]})},xt=()=>e.jsxs(w,{children:[e.jsx(g,{colSpan:1}),e.jsx(b,{colSpan:2,children:"Flow (per minute)"}),e.jsx(b,{colSpan:1,align:"right",children:"Total"}),e.jsx(b,{colSpan:1,align:"right",children:"Per array"}),e.jsx(b,{colSpan:1,align:"right",children:"Per facility"})]}),yt=t=>{const{data:n,placement:o}=t,{materialFlowPerMinutePerFacility:c,productFlowPerMinutePerFacility:r}=n,{facilitiesNeeded:s,facilitiesPerArray:i}=o,a=Object.entries(c).map(([u,d],p)=>e.jsx(te,{label:u,perFacility:-d,perArray:-d*s,perTotal:-d*i},`m-${u}-${p}`)),l=Object.entries(r).map(([u,d],p)=>e.jsx(te,{label:u,perFacility:d,perArray:d*s,perTotal:d*i},`prod-${u}-${p}`));return e.jsx(x,{square:!0,elevation:2,children:e.jsx(se,{children:e.jsxs(ce,{children:[e.jsx(ie,{children:e.jsx(xt,{})}),e.jsxs(ae,{children:[a,l]})]})})})},gt=t=>{const{placement:n}=t,{current:o}=m.useRef([{icon:e.jsx(A,{color:"secondary"}),render:r=>r.facilitiesPerArray,label:"Facilities per array"},{icon:e.jsx(A,{color:"secondary"}),render:r=>r.arraysNeeded,label:"Arrays needed"},{icon:e.jsx(A,{color:"secondary"}),render:r=>r.facilitiesNeeded,label:"Total facilities needed"},{icon:e.jsx(A,{color:"secondary"}),render:r=>r.leftoverFacilities,label:"Leftover facilities"}]),c=o.map(({icon:r,label:s,render:i})=>e.jsxs(W,{disableGutters:!0,children:[e.jsx(F,{children:r}),e.jsx(S,{primary:s,secondary:i(n)})]},s));return e.jsx(x,{square:!0,elevation:2,children:e.jsxs(U,{dense:!0,disablePadding:!0,children:[e.jsx(D,{disableGutters:!0,disableSticky:!0,children:"Placement"}),c]})})},jt=t=>{const{recipe:n}=t,{current:o}=m.useRef([{icon:e.jsx(N,{color:"secondary"}),render:r=>`${r.cycleTimeSecond} s`,label:"Cycle time"},{icon:e.jsx($e,{color:"secondary"}),render:r=>r.speedupOnly?"No":"Yes",label:"Extra products bonus"},{icon:e.jsx(Ye,{color:"secondary"}),render:r=>Object.entries(r.materialRecord).map(([s,i])=>`${i} ${s}`),label:"Materials"},{icon:e.jsx(Be,{color:"secondary"}),render:r=>Object.entries(r.productRecord).map(([s,i])=>`${i} ${s}`),label:"Products"}]),c=o.map(({icon:r,label:s,render:i})=>e.jsxs(W,{disableGutters:!0,children:[e.jsx(F,{children:r}),e.jsx(S,{primary:s,secondary:i(n)})]},s));return e.jsx(x,{square:!0,elevation:2,children:e.jsxs(U,{dense:!0,disablePadding:!0,children:[e.jsx(D,{disableGutters:!0,disableSticky:!0,children:"Recipe Information"}),c]})})},Ct=t=>{const{proliferator:n}=t,{current:o}=m.useRef([{icon:e.jsx(N,{color:"secondary"}),render:r=>`${C((r.cycleMultiplier-1)*100)}%`,label:"Bonus cycle speed"},{icon:e.jsx(N,{color:"secondary"}),render:r=>`${C((r.productMultiplier-1)*100)}%`,label:"Bonus products per cycle"},{icon:e.jsx(z,{color:"secondary"}),render:r=>`${C((r.workConsumptionMultiplier-1)*100)}%`,label:"Additional work consumption"}]),c=o.map(({icon:r,label:s,render:i})=>e.jsxs(W,{disableGutters:!0,children:[e.jsx(F,{children:r}),e.jsx(S,{primary:s,secondary:i(n)})]},s));return e.jsx(x,{square:!0,elevation:2,children:e.jsxs(U,{dense:!0,disablePadding:!0,children:[e.jsx(D,{disableGutters:!0,disableSticky:!0,children:"Proliferator effects"}),c]})})},St=t=>{const{facility:n}=t,{current:o}=m.useRef([{icon:e.jsx(ze,{color:"secondary"}),render:r=>r.label,label:"Name"},{icon:e.jsx(qe,{color:"secondary"}),render:r=>r.recipeType,label:"Category"},{icon:e.jsx(N,{color:"secondary"}),render:r=>`${C(r.cycleMultiplier*100)}%`,label:"Cycle speed"},{icon:e.jsx(Ke,{color:"secondary"}),render:r=>r.connectionCount,label:"Sorter connections"},{icon:e.jsx(z,{color:"secondary"}),render:r=>`${C(r.workConsumptionMW)} MW`,label:"Work comsumption"},{icon:e.jsx(z,{color:"secondary"}),render:r=>`${C(r.idleConsumptionMW)} MW`,label:"Idle comsumption"}]),c=o.map(({icon:r,label:s,render:i})=>e.jsxs(W,{disableGutters:!0,children:[e.jsx(F,{children:r}),e.jsx(S,{primary:s,secondary:i(n)})]},s));return e.jsx(x,{square:!0,elevation:2,children:e.jsxs(U,{dense:!0,disablePadding:!0,children:[e.jsx(D,{disableGutters:!0,disableSticky:!0,children:"Facility information"}),c]})})},Rt=t=>{const{data:n,placement:o}=t;return e.jsx(Ge,{children:e.jsxs(P,{container:!0,spacing:2,children:[e.jsxs(P,{item:!0,xs:12,md:6,display:"flex",flexDirection:"column",gap:2,children:[e.jsx(gt,{placement:o}),e.jsx(jt,{recipe:n.recipe})]}),e.jsxs(P,{item:!0,xs:12,md:6,display:"flex",flexDirection:"column",gap:2,children:[e.jsx(St,{facility:n.facility}),e.jsx(Ct,{proliferator:n.proliferator})]})]})})},bt=()=>e.jsxs(w,{children:[e.jsx(b,{colSpan:3,children:"Power consumption (MW)"}),e.jsx(b,{colSpan:1,align:"right",children:"Total"}),e.jsx(b,{colSpan:1,align:"right",children:"Per array"}),e.jsx(b,{colSpan:1,align:"right",children:"Per facility"})]}),Pt=t=>{const{data:{workUsageMWPerFacility:n,idleUsageMWPerFacility:o},placement:{facilitiesNeeded:c,facilitiesPerArray:r}}=t,s=[-n*c,-n*r,-n].map((a,l)=>e.jsx(g,{colSpan:1,align:"right",children:C(a)},`supply-${l}`)),i=[-o*c,-o*r,-o].map((a,l)=>e.jsx(g,{colSpan:1,align:"right",children:C(a)},`power-${l}`));return e.jsx(x,{square:!0,elevation:2,children:e.jsx(se,{children:e.jsxs(ce,{children:[e.jsx(ie,{children:e.jsx(bt,{})}),e.jsxs(ae,{children:[e.jsxs(w,{children:[e.jsx(g,{colSpan:3,children:"Work"}),s]}),e.jsxs(w,{children:[e.jsx(g,{colSpan:3,children:"Idle"}),i]})]})]})})})},y=(t,n,o)=>{const c=Number.parseInt(t);return Number.isNaN(c)?n:c>o?o:c<n?n:c},Ft=t=>{const{facility:n,recipe:o,proliferator:c,proliferatorSprayCount:r}=t,{cycleTimeSecond:s,materialRecord:i}=o,a=60/s*n.cycleMultiplier*c.cycleMultiplier,l={};for(const d in i)l[d]=i[d]*a;const u=y(r,0,Number.MAX_SAFE_INTEGER);if(u>0){let d=0;for(const v of Object.values(o.materialRecord))d+=a*v;let p=0;for(const v of Object.values(o.productRecord))p+=a*v*c.productMultiplier;l[`${c.label} (materials)`]=d/u,l[`${c.label} (products)`]=p/u}return l},Mt=t=>{const{facility:n,recipe:o,proliferator:c}=t,{cycleTimeSecond:r,productRecord:s}=o,i=60/r*n.cycleMultiplier*c.cycleMultiplier,a={};for(const l in s)a[l]=s[l]*i*c.productMultiplier;return a},It=t=>{const n=Ft(t),o=Mt(t);return{materialFlowPerMinutePerFacility:n,productFlowPerMinutePerFacility:o}},vt=(t,n)=>{const{facility:o,proliferator:c,recipe:r}=t,s={};for(const[l,u]of Object.entries(n))s[l]=y(u,0,Number.MAX_SAFE_INTEGER);if(Object.values(s).every(l=>l===0))return 0;const i=60/r.cycleTimeSecond*o.cycleMultiplier*c.cycleMultiplier;let a=0;for(const[l,u]of Object.entries(r.productRecord)){const d=u*i*c.productMultiplier,p=s[l]/d;p>a&&(a=p)}return a},Tt=(t,n)=>{const{facility:o,recipe:c,proliferator:r}=t,s={};for(const[l,u]of Object.entries(n))s[l]=y(u,0,Number.MAX_SAFE_INTEGER);if(Object.values(s).every(l=>l===0))return 0;const i=60/c.cycleTimeSecond*o.cycleMultiplier*r.cycleMultiplier;let a=0;for(const[l,u]of Object.entries(c.materialRecord)){const d=u*i,p=s[l]/d;(p>0&&a===0||p<a)&&(a=p)}return a},wt=t=>{const{flowrate:n,facility:o,recipe:c,proliferator:r}=t,s={};for(const u in n)s[u]=y(n[u],0,Number.MAX_SAFE_INTEGER);const i=60/c.cycleTimeSecond*o.cycleMultiplier*r.cycleMultiplier;let a=0;for(const u in c.materialRecord){const p=s[u]/(s[u]*i);(a===0&&p>0||p<a)&&(a=p)}let l=0;for(const u in c.productRecord){const p=s[u]/(s[u]*i*r.productMultiplier);(l===0&&p>0||p<l)&&(l=p)}return Math.min(a,l)},Et=t=>{let n=0;t.computeMode==="constraint"?n=Tt(t,t.constraint):n=vt(t,t.capacity);const o=wt(t);let c=0,r=0;return o>0&&(c=Math.floor(n/o),n=n-c*o),{facilitiesNeeded:n,facilitiesPerArray:o,arraysNeeded:c,leftoverFacilities:r}},At=t=>{const{sorter:n,facility:o}=t;let c=0;for(const r in n){const s=me(r);if(s===void 0)continue;const i=y(n[r],0,Number.MAX_SAFE_INTEGER);c+=i*s.idleConsumptionMW}return o.idleConsumptionMW+c},Ot=t=>{const{facility:n,proliferator:o,sorter:c}=t;let r=0;for(const i in c){const a=me(i);if(a===void 0)continue;const l=y(c[i],0,Number.MAX_SAFE_INTEGER);r+=l*a.workConsumptionMW}return n.workConsumptionMW*o.workConsumptionMultiplier+r},Nt=t=>{const n=At(t),o=Ot(t);return{idleUsageMWPerFacility:n,workUsageMWPerFacility:o}},fe="facility",he="recipe",xe="proliferator",ye="sorter",ge="flowrate",je="proliferatorSprayCount",Ce="computeMode",Se="constraint",Re="capacity",kt=()=>{const t=be(),n=Lt()??"0",o=k(Se),c=o===null?{}:o;for(const a in t.recipe.materialRecord)c[a]="",o!==null&&(c[a]=o[a]??"");const r=k(Re),s=r===null?{}:r;for(const a in t.recipe.productRecord)s[a]="",r!==null&&(s[a]=r[a]??"");return{computeMode:n,constraint:c,capacity:s}},Lt=()=>{const t=localStorage.getItem(Ce);return t===null||t!=="0"&&t!=="1"?null:t},be=()=>{const t=Wt()??H("Arc Smelter"),n=Ut()??J("Copper Ingot"),o=Dt()??$("None"),c=_t()??o.sprayCount.toString(),r=k(ye),s=r===null?{}:r;if(r===null)for(const u of it())s[u.label]="";const i=k(ge),a=i===null?{}:i;if(i===null){for(const u in n.materialRecord)a[u]="";for(const u in n.productRecord)a[u]=""}return{facility:t,recipe:n,proliferator:o,proliferatorSprayCount:c,sorter:s,flowrate:a}},_t=()=>localStorage.getItem(je),k=t=>{try{const n=localStorage.getItem(t);if(n===null)return null;const o=JSON.parse(n);if(typeof o!="object")return null;for(const c in o)if(typeof o[c]!="string")return null;return o}catch{return null}},Wt=()=>{const t=localStorage.getItem(fe);if(t!==null)return H(t)},Ut=()=>{const t=localStorage.getItem(he);if(t!==null)return J(t)},Dt=()=>{const t=localStorage.getItem(xe);if(t!==null)return $(t)},Y=(t,n)=>{const[o,c]=m.useState(n);return[o,s=>{c(s),localStorage.setItem(t,s.label)}]},L=(t,n)=>{const[o,c]=m.useState(n);return[o,(a,l)=>{c(u=>{const d={...u};return d[a]=l,localStorage.setItem(t,JSON.stringify(d)),d})},a=>{c(a),localStorage.setItem(t,JSON.stringify(a))},a=>{c(l=>{const u=a(l);return localStorage.setItem(t,JSON.stringify(u)),u})}]},Gt=(t,n,o)=>{let c=0;for(const r in n)r!==t&&(c+=y(n[r],0,o-c));return c},$t=t=>{const[n,,o,c]=L(ge,t);return[n,(s,i,a)=>{c(l=>{const u={...l};if(i==="")return u[s]="",u;const d=Gt(s,l,a),p=y(i,0,a-d);return u[s]=p.toString(),u})},o]},Yt=(t,n,o)=>{let c=0;for(const r in n)r!==t&&(c+=y(n[r],0,o-c));return c},Bt=t=>{const[n,,,o]=L(ye,t);return[n,(r,s,i)=>{o(a=>{const l={...a};if(s==="")return l[r]="",l;const u=Yt(r,a,i),d=y(s,0,i-u);return l[r]=d.toString(),l})}]},re=(t,n)=>{const[o,c]=m.useState(n);return[o,s=>{c(s),localStorage.setItem(t,s)}]},zt=()=>{const{current:t}=m.useRef(be()),{current:n}=m.useRef(kt()),[o,c]=Y(fe,t.facility),[r,s]=Y(he,t.recipe),[i,a]=Bt(t.sorter),[l,u]=Y(xe,t.proliferator),[d,p]=re(je,t.proliferatorSprayCount),[v,Pe,Fe]=$t(t.flowrate),[Me,Ie]=re(Ce,n.computeMode),[ve,Te,we]=L(Se,n.constraint),[Ee,Ae,Oe]=L(Re,n.capacity),Ne=f=>{c(f);const h=nt(f.recipeType);h!==void 0&&Q(h)},Q=f=>{if(s(f),f.speedupOnly&&l.mode==="Extra Products"){const R=ct(ue.PRODUCTION_SPEEDUP);R!==void 0&&u(R)}const h={},M={},Z={};for(const R in f.materialRecord)M[R]="",h[R]="0";for(const R in f.productRecord)Z[R]="",h[R]="0";Fe(h),Oe(Z),we(M)};return{data:{facility:o,flowrate:v,proliferator:l,proliferatorSprayCount:d,recipe:r,sorter:i,capacity:Ee,computeMode:Me,constraint:ve},handlers:{handleConstraintUpdate:Te,handleCapacityUpdate:Ae,handleComputeModeChange:Ie,handleFacilityChange:Ne,handleProliferatorChange:f=>{u(f),p(f.sprayCount.toString())},handleRecipeChange:Q,handleSorterChange:(f,h)=>{const{connectionCount:M}=o;a(f,h,M)},handleFlowrateChange:(f,h)=>{const{connectionCount:M}=o;Pe(f,h,M*7200)},handleProliferatorSprayCountChange:p}}},qt=t=>{const n=Xe(),o=He(n.breakpoints.down("md")),{slotMain:c,slotSide:r}=t;return o?e.jsxs(x,{square:!0,elevation:0,children:[e.jsx(x,{square:!0,elevation:2,children:r}),c]}):e.jsx(oe,{square:!0,elevation:0,children:e.jsxs(P,{container:!0,columns:10,children:[e.jsx(P,{item:!0,md:!0,padding:4,height:"100vh",overflow:"auto",children:c}),e.jsx(P,{item:!0,md:3,height:"100vh",overflow:"auto",children:e.jsx(x,{square:!0,elevation:2,children:r})})]})})},Kt=()=>{const{data:t,handlers:n}=zt(),o=It(t),c=Nt(t),r=Et(t);return e.jsx(qt,{slotMain:e.jsxs(j,{spacing:2,children:[e.jsx(tt,{data:t,handlers:n}),e.jsx(yt,{data:o,placement:r}),e.jsx(Pt,{placement:r,data:c}),e.jsx(Rt,{data:t,placement:r})]}),slotSide:e.jsx(ft,{data:t,handlers:n})})},Xt=Je({components:{MuiCssBaseline:{styleOverrides:`img {
					loading: lazy;
					width: auto;
					height: 40px;
			}`}},palette:{mode:"dark",text:{primary:Qe("#fff",.87)},primary:{main:"#7ABBAD"},secondary:{main:"#C8AA81"},background:{paper:"#181D22"}}}),Ht=()=>e.jsxs(Ze,{theme:Xt,children:[e.jsx(Ve,{}),e.jsx(Kt,{})]});ke(document.getElementById("root")).render(e.jsx(m.StrictMode,{children:e.jsx(Ht,{})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtWlhma3J0cGcuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hc3NldHMvaWNvbi50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1BhZGRlZFBhcGVyLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1N0eWxlZFRleHRGaWVsZC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Db21wdXRlRm9ybS50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsYXBzaWJsZS50c3giLCIuLi8uLi9zcmMvYXNzZXRzL2dldC50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0ZhY2lsaXR5U2VsZWN0LnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0Zsb3dyYXRlRmllbGQudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvUHJvbGZpZXJhdG9yU3ByYXlDb3VudEZpZWxkLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1Byb2xpZmVyYXRvclNlbGVjdC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9SZWNpcGVTZWxlY3QudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvU3R5bGVkTnVtYmVyRmllbGQudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29uZmlnRm9ybS50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9TdHlsZWRUYWJsZUhlYWRDZWxsLnRzeCIsIi4uLy4uL3NyYy9jb3JlL2Zvcm1hdHRpbmcudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9GbG93cmF0ZVRhYmxlLnRzeCIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0luZm9Hcm91cC50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Qb3dlclVzYWdlVGFibGUudHN4IiwiLi4vLi4vc3JjL2NvcmUvcGFyc2luZy50cyIsIi4uLy4uL3NyYy9jb3JlL3NvbHZlci9zb2x2ZXJGbG93LnRzIiwiLi4vLi4vc3JjL2NvcmUvc29sdmVyL3NvbHZlclBsYWNlbWVudC50cyIsIi4uLy4uL3NyYy9jb3JlL3NvbHZlci9zb2x2ZXJQb3dlclVzYWdlLnRzIiwiLi4vLi4vc3JjL2RhdGFiYXNlL2xvY2FsLnRzIiwiLi4vLi4vc3JjL2hvb2tzL3Vlc0xhYmVsT2JqZWN0LnRzIiwiLi4vLi4vc3JjL2hvb2tzL3VzZVJlY29yZC50cyIsIi4uLy4uL3NyYy9ob29rcy91c2VGbG93cmF0ZS50cyIsIi4uLy4uL3NyYy9ob29rcy91c2VTb3J0ZXIudHMiLCIuLi8uLi9zcmMvaG9va3MvdXNlU3RyaW5nLnRzIiwiLi4vLi4vc3JjL2hvb2tzL3VzZUVkaXRvckZvcm0udHMiLCIuLi8uLi9zcmMvbGF5b3V0cy9MYXlvdXQudHN4IiwiLi4vLi4vc3JjL3BhZ2VzL0VkaXRvci50c3giLCIuLi8uLi9zcmMvQXBwL3RoZW1lLnRzIiwiLi4vLi4vc3JjL0FwcC9BcHAudHN4IiwiLi4vLi4vc3JjL21haW4udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb2xpZmVyYXRvciB9IGZyb20gXCJAZXVyeWRvcy9kc3AtaXRlbS1yZWdpc3RyeVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvSWNvblVSTCA9IChvcHRpb246IHN0cmluZykgPT4ge1xyXG5cdGNvbnN0IHRhcmdldCA9IG9wdGlvblxyXG5cdFx0LnJlcGxhY2VBbGwoXCIgXCIsIFwiX1wiKVxyXG5cdFx0LnRvTG93ZXJDYXNlKCk7XHJcblx0Y29uc3QgaHJlZiA9IGAuL2ltYWdlcy8ke3RhcmdldH0ud2VicGA7XHJcblx0cmV0dXJuIGhyZWY7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcHJvbGlmZXJhdG9yVG9JY29uVVJMID0gKFxyXG5cdGl0ZW06IFByb2xpZmVyYXRvcixcclxuKSA9PiB7XHJcblx0c3dpdGNoIChpdGVtLnNwcmF5Q291bnQpIHtcclxuXHRcdGNhc2UgMTI6XHJcblx0XHRcdHJldHVybiBgLi9pbWFnZXMvcHJvbGlmZXJhdG9yX21rLmkud2VicGA7XHJcblx0XHRjYXNlIDI0OlxyXG5cdFx0XHRyZXR1cm4gYC4vaW1hZ2VzL3Byb2xpZmVyYXRvcl9tay5paS53ZWJwYDtcclxuXHRcdGNhc2UgNjA6XHJcblx0XHRcdHJldHVybiBgLi9pbWFnZXMvcHJvbGlmZXJhdG9yX21rLmlpaS53ZWJwYDtcclxuXHR9XHJcblx0cmV0dXJuIFwiLi9pbWFnZXMvbm9uZS53ZWJwXCI7XHJcbn07XHJcbiIsImltcG9ydCB7IFBhcGVyLCBzdHlsZWQgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBhZGRlZFBhcGVyID0gc3R5bGVkKFBhcGVyKShcclxuXHQoeyB0aGVtZSB9KSA9PiAoe1xyXG5cdFx0cGFkZGluZzogdGhlbWUuc3BhY2luZygyKSxcclxuXHRcdGRpc3BsYXk6IFwiZmxleFwiLFxyXG5cdFx0ZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuXHRcdGdhcDogdGhlbWUuc3BhY2luZygyKSxcclxuXHR9KSxcclxuKTtcclxuIiwiaW1wb3J0IHtcclxuXHRJbnB1dEFkb3JubWVudCxcclxuXHRUZXh0RmllbGQsXHJcbn0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHtcclxuXHRDaGFuZ2VFdmVudCxcclxuXHRGQyxcclxuXHRSZWFjdE5vZGUsXHJcbn0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG50eXBlIFN0eWxlZFRleHRGaWVsZCA9IHtcclxuXHRwbGFjZWhvbGRlcj86IHN0cmluZztcclxuXHRwcmVmaXg/OiBSZWFjdE5vZGU7XHJcblx0c3VmZml4PzogUmVhY3ROb2RlO1xyXG5cdGRpc2FibGVkPzogYm9vbGVhbjtcclxuXHRsYWJlbDogc3RyaW5nO1xyXG5cdG1heExlbmd0aDogbnVtYmVyO1xyXG5cdHZhbHVlOiBzdHJpbmc7XHJcblx0b25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG59O1xyXG5leHBvcnQgY29uc3QgU3R5bGVkVGV4dEZpZWxkOiBGQzxcclxuXHRTdHlsZWRUZXh0RmllbGRcclxuPiA9IChwcm9wcykgPT4ge1xyXG5cdGNvbnN0IHtcclxuXHRcdHBsYWNlaG9sZGVyLFxyXG5cdFx0ZGlzYWJsZWQsXHJcblx0XHRtYXhMZW5ndGgsXHJcblx0XHRwcmVmaXgsXHJcblx0XHRzdWZmaXgsXHJcblx0XHRsYWJlbCxcclxuXHRcdHZhbHVlLFxyXG5cdFx0b25DaGFuZ2UsXHJcblx0fSA9IHByb3BzO1xyXG5cclxuXHRjb25zdCBoYW5kbGVWYWx1ZUNoYW5nZSA9IChcclxuXHRcdGV2ZW50OiBDaGFuZ2VFdmVudDxcclxuXHRcdFx0SFRNTElucHV0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnRcclxuXHRcdD4sXHJcblx0KSA9PiB7XHJcblx0XHRjb25zdCBuZXh0VmFsdWUgPSBldmVudC50YXJnZXQudmFsdWVcclxuXHRcdFx0LnNsaWNlKDAsIG1heExlbmd0aClcclxuXHRcdFx0Lm5vcm1hbGl6ZSgpO1xyXG5cdFx0b25DaGFuZ2UobmV4dFZhbHVlKTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PFRleHRGaWVsZFxyXG5cdFx0XHRmdWxsV2lkdGhcclxuXHRcdFx0cGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxyXG5cdFx0XHRkaXNhYmxlZD17ZGlzYWJsZWR9XHJcblx0XHRcdGxhYmVsPXtsYWJlbH1cclxuXHRcdFx0dmFsdWU9e3ZhbHVlfVxyXG5cdFx0XHRvbkNoYW5nZT17aGFuZGxlVmFsdWVDaGFuZ2V9XHJcblx0XHRcdElucHV0UHJvcHM9e3tcclxuXHRcdFx0XHRzdGFydEFkb3JubWVudDogKFxyXG5cdFx0XHRcdFx0PElucHV0QWRvcm5tZW50IHBvc2l0aW9uPVwic3RhcnRcIj5cclxuXHRcdFx0XHRcdFx0e3ByZWZpeH1cclxuXHRcdFx0XHRcdDwvSW5wdXRBZG9ybm1lbnQ+XHJcblx0XHRcdFx0KSxcclxuXHRcdFx0XHRlbmRBZG9ybm1lbnQ6IChcclxuXHRcdFx0XHRcdDxJbnB1dEFkb3JubWVudCBwb3NpdGlvbj1cImVuZFwiPlxyXG5cdFx0XHRcdFx0XHR7c3VmZml4fVxyXG5cdFx0XHRcdFx0PC9JbnB1dEFkb3JubWVudD5cclxuXHRcdFx0XHQpLFxyXG5cdFx0XHR9fVxyXG5cdFx0Lz5cclxuXHQpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBSZXN0YXJ0QWx0Um91bmRlZCB9IGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsXCI7XHJcbmltcG9ydCB7XHJcblx0R3JpZCxcclxuXHRJY29uQnV0dG9uLFxyXG5cdFRhYixcclxuXHRUYWJzLFxyXG59IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDLCBTeW50aGV0aWNFdmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB0b0ljb25VUkwgfSBmcm9tIFwifmFzc2V0cy9pY29uXCI7XHJcbmltcG9ydCB7XHJcblx0RWRpdG9yRm9ybURhdGEsXHJcblx0RWRpdG9yRm9ybUhhbmRsZXJzLFxyXG59IGZyb20gXCJ+dHlwZXMvcXVlcnlcIjtcclxuaW1wb3J0IHsgUGFkZGVkUGFwZXIgfSBmcm9tIFwiLi9QYWRkZWRQYXBlclwiO1xyXG5pbXBvcnQgeyBTdHlsZWRUZXh0RmllbGQgfSBmcm9tIFwiLi9TdHlsZWRUZXh0RmllbGRcIjtcclxuXHJcbnR5cGUgQ29tcHV0ZUZvcm1Qcm9wcyA9IHtcclxuXHRkYXRhOiBFZGl0b3JGb3JtRGF0YTtcclxuXHRoYW5kbGVyczogRWRpdG9yRm9ybUhhbmRsZXJzO1xyXG59O1xyXG5leHBvcnQgY29uc3QgQ29tcHV0ZUZvcm06IEZDPENvbXB1dGVGb3JtUHJvcHM+ID0gKFxyXG5cdHByb3BzLFxyXG4pID0+IHtcclxuXHRjb25zdCB7IGRhdGEsIGhhbmRsZXJzIH0gPSBwcm9wcztcclxuXHJcblx0Y29uc3QgaGFuZGxlQ29tcHV0ZU1vZGVDaGFuZ2UgPSAoXHJcblx0XHRfOiBTeW50aGV0aWNFdmVudDxFbGVtZW50LCBFdmVudD4sXHJcblx0XHR2YWx1ZTogc3RyaW5nLFxyXG5cdCkgPT4ge1xyXG5cdFx0aGFuZGxlcnMuaGFuZGxlQ29tcHV0ZU1vZGVDaGFuZ2UodmFsdWUpO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IGl0ZW1zID1cclxuXHRcdGRhdGEuY29tcHV0ZU1vZGUgPT09IFwiMFwiXHJcblx0XHRcdD8gZGF0YS5jb25zdHJhaW50XHJcblx0XHRcdDogZGF0YS5jYXBhY2l0eTtcclxuXHJcblx0Y29uc3QgZm4gPVxyXG5cdFx0ZGF0YS5jb21wdXRlTW9kZSA9PT0gXCIwXCJcclxuXHRcdFx0PyBoYW5kbGVycy5oYW5kbGVDb25zdHJhaW50VXBkYXRlXHJcblx0XHRcdDogaGFuZGxlcnMuaGFuZGxlQ2FwYWNpdHlVcGRhdGU7XHJcblxyXG5cdGNvbnN0IGl0ZW1GaWVsZHMgPSBPYmplY3QuZW50cmllcyhpdGVtcykubWFwKFxyXG5cdFx0KFtsYWJlbCwgdmFsdWVdKSA9PiAoXHJcblx0XHRcdDxHcmlkXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0eHM9ezEyfVxyXG5cdFx0XHRcdG1kPXs2fVxyXG5cdFx0XHRcdGRpc3BsYXk9XCJmbGV4XCJcclxuXHRcdFx0XHRhbGlnbkl0ZW1zPVwiY2VudGVyXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxTdHlsZWRUZXh0RmllbGRcclxuXHRcdFx0XHRcdGxhYmVsPXtsYWJlbH1cclxuXHRcdFx0XHRcdG1heExlbmd0aD17Nn1cclxuXHRcdFx0XHRcdHN1ZmZpeD1cIi9taW5cIlxyXG5cdFx0XHRcdFx0cHJlZml4PXtcclxuXHRcdFx0XHRcdFx0PGltZ1xyXG5cdFx0XHRcdFx0XHRcdGFsdD17bGFiZWx9XHJcblx0XHRcdFx0XHRcdFx0c3JjPXt0b0ljb25VUkwobGFiZWwpfVxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFsdWU9e3ZhbHVlfVxyXG5cdFx0XHRcdFx0b25DaGFuZ2U9eyhuZXh0VmFsdWUpID0+XHJcblx0XHRcdFx0XHRcdGZuKGxhYmVsLCBuZXh0VmFsdWUpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8SWNvbkJ1dHRvblxyXG5cdFx0XHRcdFx0c2l6ZT1cInNtYWxsXCJcclxuXHRcdFx0XHRcdGNvbG9yPVwicHJpbWFyeVwiXHJcblx0XHRcdFx0XHRjaGlsZHJlbj17PFJlc3RhcnRBbHRSb3VuZGVkIC8+fVxyXG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4gZm4obGFiZWwsIFwiXCIpfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvR3JpZD5cclxuXHRcdCksXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxQYWRkZWRQYXBlclxyXG5cdFx0XHRzcXVhcmVcclxuXHRcdFx0ZWxldmF0aW9uPXsyfVxyXG5cdFx0PlxyXG5cdFx0XHQ8VGFic1xyXG5cdFx0XHRcdHZhbHVlPXtkYXRhLmNvbXB1dGVNb2RlfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXtoYW5kbGVDb21wdXRlTW9kZUNoYW5nZX1cclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxUYWJcclxuXHRcdFx0XHRcdGRpc2FibGVSaXBwbGVcclxuXHRcdFx0XHRcdGxhYmVsPVwiQ29uc3RyYWludFwiXHJcblx0XHRcdFx0XHR2YWx1ZT1cIjBcIlxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PFRhYlxyXG5cdFx0XHRcdFx0ZGlzYWJsZVJpcHBsZVxyXG5cdFx0XHRcdFx0bGFiZWw9XCJDYXBhY2l0eVwiXHJcblx0XHRcdFx0XHR2YWx1ZT1cIjFcIlxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvVGFicz5cclxuXHRcdFx0PEdyaWRcclxuXHRcdFx0XHRjb250YWluZXJcclxuXHRcdFx0XHRzcGFjaW5nPXsyfVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0e2l0ZW1GaWVsZHN9XHJcblx0XHRcdDwvR3JpZD5cclxuXHRcdDwvUGFkZGVkUGFwZXI+XHJcblx0KTtcclxufTtcclxuIiwiaW1wb3J0IHtcclxuXHRFeHBhbmRMZXNzUm91bmRlZCxcclxuXHRFeHBhbmRNb3JlUm91bmRlZCxcclxufSBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbFwiO1xyXG5pbXBvcnQge1xyXG5cdENvbGxhcHNlLFxyXG5cdEljb25CdXR0b24sXHJcblx0U3RhY2ssXHJcblx0VHlwb2dyYXBoeSxcclxufSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xyXG5pbXBvcnQge1xyXG5cdEZDLFxyXG5cdEZyYWdtZW50LFxyXG5cdFJlYWN0Tm9kZSxcclxuXHR1c2VTdGF0ZSxcclxufSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbnR5cGUgQ29sbGFwc2libGVQcm9wcyA9IHtcclxuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG5cdHRpdGxlOiBzdHJpbmc7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBDb2xsYXBzaWJsZTogRkM8Q29sbGFwc2libGVQcm9wcz4gPSAoXHJcblx0cHJvcHMsXHJcbikgPT4ge1xyXG5cdGNvbnN0IHsgdGl0bGUsIGNoaWxkcmVuIH0gPSBwcm9wcztcclxuXHRjb25zdCBbY29sbGFwc2VkLCBzZXRDb2xsYXBzZWRdID1cclxuXHRcdHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcblx0Y29uc3QgaGFuZGxlQ29sbGFwc2VUb2dnbGUgPSAoKSA9PiB7XHJcblx0XHRzZXRDb2xsYXBzZWQoIWNvbGxhcHNlZCk7XHJcblx0fTtcclxuXHJcblx0Y29uc3QgZXhwYW5kSWNvbiA9IGNvbGxhcHNlZCA/IChcclxuXHRcdDxFeHBhbmRNb3JlUm91bmRlZCAvPlxyXG5cdCkgOiAoXHJcblx0XHQ8RXhwYW5kTGVzc1JvdW5kZWQgLz5cclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PEZyYWdtZW50PlxyXG5cdFx0XHQ8U3RhY2tcclxuXHRcdFx0XHRkaXJlY3Rpb249XCJyb3dcIlxyXG5cdFx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxyXG5cdFx0XHRcdGp1c3RpZnlDb250ZW50PVwic3BhY2UtYmV0d2VlblwiXHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8VHlwb2dyYXBoeVxyXG5cdFx0XHRcdFx0Zm9udFdlaWdodD1cIjUwMFwiXHJcblx0XHRcdFx0XHRmb250U2l6ZT1cImxhcmdlXCJcclxuXHRcdFx0XHRcdGNvbG9yPVwic2Vjb25kYXJ5Lm1haW5cIlxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHt0aXRsZX1cclxuXHRcdFx0XHQ8L1R5cG9ncmFwaHk+XHJcblx0XHRcdFx0PEljb25CdXR0b25cclxuXHRcdFx0XHRcdGRpc2FibGVSaXBwbGVcclxuXHRcdFx0XHRcdHNpemU9XCJzbWFsbFwiXHJcblx0XHRcdFx0XHRjb2xvcj1cInByaW1hcnlcIlxyXG5cdFx0XHRcdFx0b25DbGljaz17aGFuZGxlQ29sbGFwc2VUb2dnbGV9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e2V4cGFuZEljb259XHJcblx0XHRcdFx0PC9JY29uQnV0dG9uPlxyXG5cdFx0XHQ8L1N0YWNrPlxyXG5cdFx0XHQ8Q29sbGFwc2UgaW49eyFjb2xsYXBzZWR9PlxyXG5cdFx0XHRcdDxTdGFjayBzcGFjaW5nPXsyfT57Y2hpbGRyZW59PC9TdGFjaz5cclxuXHRcdFx0PC9Db2xsYXBzZT5cclxuXHRcdDwvRnJhZ21lbnQ+XHJcblx0KTtcclxufTtcclxuIiwiaW1wb3J0IHtcclxuXHRGQUNJTElUWV9SRUdJU1RSWSxcclxuXHRQUk9MSUZFUkFUT1JfUkVHSVNURVJZLFxyXG5cdFJFQ0lQRV9SRUdJU1RSWSxcclxuXHRTT1JURVJfUkVHSVNUUlksXHJcbn0gZnJvbSBcIkBldXJ5ZG9zL2RzcC1pdGVtLXJlZ2lzdHJ5XCI7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RmFjaWxpdHkgPSAobGFiZWw6IHN0cmluZykgPT4ge1xyXG5cdHJldHVybiBGQUNJTElUWV9SRUdJU1RSWS5nZXQobGFiZWwpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEZhY2lsaXR5QWxsID0gKCkgPT4ge1xyXG5cdGNvbnN0IGl0ZW1zID0gRkFDSUxJVFlfUkVHSVNUUlkudmFsdWVzKCk7XHJcblx0cmV0dXJuIFsuLi5pdGVtc107XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmVjaXBlV2l0aFR5cGUgPSAoXHJcblx0clR5cGU6IHN0cmluZyxcclxuKSA9PiB7XHJcblx0Zm9yIChjb25zdCBpdGVtIG9mIFJFQ0lQRV9SRUdJU1RSWS52YWx1ZXMoKSkge1xyXG5cdFx0aWYgKGl0ZW0ucmVjaXBlVHlwZSA9PT0gclR5cGUpIHtcclxuXHRcdFx0cmV0dXJuIGl0ZW07XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlY2lwZSA9IChsYWJlbDogc3RyaW5nKSA9PiB7XHJcblx0cmV0dXJuIFJFQ0lQRV9SRUdJU1RSWS5nZXQobGFiZWwpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJlY2lwZUFsbCA9ICgpID0+IHtcclxuXHRjb25zdCBpdGVtcyA9IFJFQ0lQRV9SRUdJU1RSWS52YWx1ZXMoKTtcclxuXHRyZXR1cm4gWy4uLml0ZW1zXTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQcm9saWZlcmF0b3IgPSAoXHJcblx0bGFiZWw6IHN0cmluZyxcclxuKSA9PiB7XHJcblx0cmV0dXJuIFBST0xJRkVSQVRPUl9SRUdJU1RFUlkuZ2V0KGxhYmVsKTtcclxufTtcclxuZXhwb3J0IGNvbnN0IGdldFByb2xpZmVyYXRvckFsbCA9ICgpID0+IHtcclxuXHRjb25zdCBpdGVtcyA9IFBST0xJRkVSQVRPUl9SRUdJU1RFUlkudmFsdWVzKCk7XHJcblx0cmV0dXJuIFsuLi5pdGVtc107XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UHJvbGlmZXJhdG9yV2l0aE1vZGUgPSAoXHJcblx0bW9kZTogc3RyaW5nLFxyXG4pID0+IHtcclxuXHRmb3IgKGNvbnN0IGl0ZW0gb2YgUFJPTElGRVJBVE9SX1JFR0lTVEVSWS52YWx1ZXMoKSkge1xyXG5cdFx0aWYgKGl0ZW0ubW9kZSA9PT0gbW9kZSkge1xyXG5cdFx0XHRyZXR1cm4gaXRlbTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0U29ydGVyQWxsID0gKCkgPT4ge1xyXG5cdGNvbnN0IGl0ZW1zID0gU09SVEVSX1JFR0lTVFJZLnZhbHVlcygpO1xyXG5cdHJldHVybiBbLi4uaXRlbXNdO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNvcnRlciA9IChsYWJlbDogc3RyaW5nKSA9PiB7XHJcblx0cmV0dXJuIFNPUlRFUl9SRUdJU1RSWS5nZXQobGFiZWwpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBGYWNpbGl0eSB9IGZyb20gXCJAZXVyeWRvcy9kc3AtaXRlbS1yZWdpc3RyeVwiO1xyXG5pbXBvcnQge1xyXG5cdExpc3RJdGVtSWNvbixcclxuXHRMaXN0SXRlbVRleHQsXHJcblx0TWVudUl0ZW0sXHJcblx0U2VsZWN0LFxyXG5cdFNlbGVjdENoYW5nZUV2ZW50LFxyXG59IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHtcclxuXHRnZXRGYWNpbGl0eSxcclxuXHRnZXRGYWNpbGl0eUFsbCxcclxufSBmcm9tIFwifmFzc2V0cy9nZXRcIjtcclxuaW1wb3J0IHsgdG9JY29uVVJMIH0gZnJvbSBcIn5hc3NldHMvaWNvblwiO1xyXG5cclxudHlwZSBGYWNpbGl0eVNlbGVjdFByb3BzID0ge1xyXG5cdHZhbHVlOiBGYWNpbGl0eTtcclxuXHRvbkNoYW5nZTogKHZhbHVlOiBGYWNpbGl0eSkgPT4gdm9pZDtcclxufTtcclxuZXhwb3J0IGNvbnN0IEZhY2lsaXR5U2VsZWN0OiBGQzxcclxuXHRGYWNpbGl0eVNlbGVjdFByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7IG9uQ2hhbmdlLCB2YWx1ZSB9ID0gcHJvcHM7XHJcblx0Y29uc3QgeyBjdXJyZW50OiBvcHRpb25zIH0gPSB1c2VSZWYoXHJcblx0XHRnZXRGYWNpbGl0eUFsbCgpLFxyXG5cdCk7XHJcblxyXG5cdGNvbnN0IGhhbmRsZUNoYW5nZSA9IChcclxuXHRcdGU6IFNlbGVjdENoYW5nZUV2ZW50PHN0cmluZz4sXHJcblx0KSA9PiB7XHJcblx0XHRjb25zdCBuZXh0ID0gZ2V0RmFjaWxpdHkoZS50YXJnZXQudmFsdWUpO1xyXG5cdFx0aWYgKG5leHQgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRvbkNoYW5nZShuZXh0KTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBpdGVtcyA9IG9wdGlvbnMubWFwKCh7IGxhYmVsIH0pID0+IChcclxuXHRcdDxNZW51SXRlbVxyXG5cdFx0XHRrZXk9e2xhYmVsfVxyXG5cdFx0XHR2YWx1ZT17bGFiZWx9XHJcblx0XHRcdGRpc2FibGVSaXBwbGVcclxuXHRcdD5cclxuXHRcdFx0PExpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHQ8aW1nXHJcblx0XHRcdFx0XHRzcmM9e3RvSWNvblVSTChsYWJlbCl9XHJcblx0XHRcdFx0XHRhbHQ9e2xhYmVsfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvTGlzdEl0ZW1JY29uPlxyXG5cdFx0XHQ8TGlzdEl0ZW1UZXh0PntsYWJlbH08L0xpc3RJdGVtVGV4dD5cclxuXHRcdDwvTWVudUl0ZW0+XHJcblx0KSk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8U2VsZWN0XHJcblx0XHRcdHNpemU9XCJzbWFsbFwiXHJcblx0XHRcdHZhbHVlPXt2YWx1ZS5sYWJlbH1cclxuXHRcdFx0b25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuXHRcdFx0U2VsZWN0RGlzcGxheVByb3BzPXt7XHJcblx0XHRcdFx0c3R5bGU6IHtcclxuXHRcdFx0XHRcdGRpc3BsYXk6IFwiZmxleFwiLFxyXG5cdFx0XHRcdFx0YWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9fVxyXG5cdFx0PlxyXG5cdFx0XHR7aXRlbXN9XHJcblx0XHQ8L1NlbGVjdD5cclxuXHQpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBSZXN0YXJ0QWx0Um91bmRlZCB9IGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEljb25CdXR0b24sIFN0YWNrIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgRkMgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdG9JY29uVVJMIH0gZnJvbSBcIn5hc3NldHMvaWNvblwiO1xyXG5pbXBvcnQgeyBTdHlsZWRUZXh0RmllbGQgfSBmcm9tIFwiLi9TdHlsZWRUZXh0RmllbGRcIjtcclxuXHJcbnR5cGUgRmxvd3JhdGVGaWVsZFByb3BzID0ge1xyXG5cdHZhbHVlOiBzdHJpbmc7XHJcblx0bGFiZWw6IHN0cmluZztcclxuXHRvbkNoYW5nZTogKGw6IHN0cmluZywgbmV4dDogc3RyaW5nKSA9PiB2b2lkO1xyXG59O1xyXG5leHBvcnQgY29uc3QgRmxvd3JhdGVGaWVsZDogRkM8XHJcblx0Rmxvd3JhdGVGaWVsZFByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCBoYW5kbGVSZXNldCA9ICgpID0+IHtcclxuXHRcdG9uQ2hhbmdlKGxhYmVsLCBcIlwiKTtcclxuXHR9O1xyXG5cdGNvbnN0IGhhbmRsZUNoYW5nZSA9IChuZXh0OiBzdHJpbmcpID0+IHtcclxuXHRcdG9uQ2hhbmdlKGxhYmVsLCBuZXh0KTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCB7IHZhbHVlLCBsYWJlbCwgb25DaGFuZ2UgfSA9IHByb3BzO1xyXG5cdHJldHVybiAoXHJcblx0XHQ8U3RhY2tcclxuXHRcdFx0ZGlyZWN0aW9uPVwicm93XCJcclxuXHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXHJcblx0XHQ+XHJcblx0XHRcdDxTdHlsZWRUZXh0RmllbGRcclxuXHRcdFx0XHRsYWJlbD17bGFiZWx9XHJcblx0XHRcdFx0bWF4TGVuZ3RoPXs2fVxyXG5cdFx0XHRcdHZhbHVlPXt2YWx1ZX1cclxuXHRcdFx0XHRzdWZmaXg9XCIvbWluXCJcclxuXHRcdFx0XHRvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxyXG5cdFx0XHRcdHByZWZpeD17XHJcblx0XHRcdFx0XHQ8aW1nXHJcblx0XHRcdFx0XHRcdGFsdD17bGFiZWx9XHJcblx0XHRcdFx0XHRcdHNyYz17dG9JY29uVVJMKGxhYmVsKX1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQvPlxyXG5cdFx0XHQ8SWNvbkJ1dHRvblxyXG5cdFx0XHRcdGRpc2FibGVSaXBwbGVcclxuXHRcdFx0XHRzaXplPVwic21hbGxcIlxyXG5cdFx0XHRcdGNvbG9yPVwicHJpbWFyeVwiXHJcblx0XHRcdFx0Y2hpbGRyZW49ezxSZXN0YXJ0QWx0Um91bmRlZCAvPn1cclxuXHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVSZXNldH1cclxuXHRcdFx0Lz5cclxuXHRcdDwvU3RhY2s+XHJcblx0KTtcclxufTtcclxuIiwiaW1wb3J0IHsgUmVzdGFydEFsdFJvdW5kZWQgfSBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBJY29uQnV0dG9uLCBTdGFjayB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFN0eWxlZFRleHRGaWVsZCB9IGZyb20gXCIuL1N0eWxlZFRleHRGaWVsZFwiO1xyXG5cclxudHlwZSBQcm9sZmllcmF0b3JTcHJheUNvdW50RmllbGRQcm9wcyA9IHtcclxuXHR2YWx1ZTogc3RyaW5nO1xyXG5cdG9uQ2hhbmdlOiAobmV4dDogc3RyaW5nKSA9PiB2b2lkO1xyXG5cdGRlZmF1bHRWYWx1ZTogc3RyaW5nO1xyXG5cdGRpc2FibGVkOiBib29sZWFuO1xyXG59O1xyXG5leHBvcnQgY29uc3QgUHJvbGZpZXJhdG9yU3ByYXlDb3VudEZpZWxkOiBGQzxcclxuXHRQcm9sZmllcmF0b3JTcHJheUNvdW50RmllbGRQcm9wc1xyXG4+ID0gKHByb3BzKSA9PiB7XHJcblx0Y29uc3Qge1xyXG5cdFx0ZGVmYXVsdFZhbHVlLFxyXG5cdFx0ZGlzYWJsZWQsXHJcblx0XHRvbkNoYW5nZSxcclxuXHRcdHZhbHVlLFxyXG5cdH0gPSBwcm9wcztcclxuXHJcblx0Y29uc3QgaGFuZGxlUmVzZXQgPSAoKSA9PiB7XHJcblx0XHRvbkNoYW5nZShkZWZhdWx0VmFsdWUpO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8U3RhY2tcclxuXHRcdFx0ZGlyZWN0aW9uPVwicm93XCJcclxuXHRcdFx0YWxpZ25JdGVtcz1cImNlbnRlclwiXHJcblx0XHQ+XHJcblx0XHRcdDxTdHlsZWRUZXh0RmllbGRcclxuXHRcdFx0XHRkaXNhYmxlZD17ZGlzYWJsZWR9XHJcblx0XHRcdFx0cGxhY2Vob2xkZXI9e2RlZmF1bHRWYWx1ZX1cclxuXHRcdFx0XHRtYXhMZW5ndGg9ezZ9XHJcblx0XHRcdFx0bGFiZWw9XCJTcHJheSBDb3VudFwiXHJcblx0XHRcdFx0dmFsdWU9e3ZhbHVlfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXtvbkNoYW5nZX1cclxuXHRcdFx0XHRzdWZmaXg9XCJzcHJheXNcIlxyXG5cdFx0XHQvPlxyXG5cdFx0XHQ8SWNvbkJ1dHRvblxyXG5cdFx0XHRcdGRpc2FibGVSaXBwbGVcclxuXHRcdFx0XHRkaXNhYmxlZD17ZGlzYWJsZWR9XHJcblx0XHRcdFx0c2l6ZT1cInNtYWxsXCJcclxuXHRcdFx0XHRjb2xvcj1cInByaW1hcnlcIlxyXG5cdFx0XHRcdGNoaWxkcmVuPXs8UmVzdGFydEFsdFJvdW5kZWQgLz59XHJcblx0XHRcdFx0b25DbGljaz17aGFuZGxlUmVzZXR9XHJcblx0XHRcdC8+XHJcblx0XHQ8L1N0YWNrPlxyXG5cdCk7XHJcbn07XHJcbiIsImltcG9ydCB7XHJcblx0UHJvbGlmZXJhdG9yLFxyXG5cdFByb2xpZmVyYXRvck1vZGUsXHJcbn0gZnJvbSBcIkBldXJ5ZG9zL2RzcC1pdGVtLXJlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7XHJcblx0TGlzdEl0ZW1JY29uLFxyXG5cdExpc3RJdGVtVGV4dCxcclxuXHRNZW51SXRlbSxcclxuXHRTZWxlY3QsXHJcblx0U2VsZWN0Q2hhbmdlRXZlbnQsXHJcbn0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgRkMsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge1xyXG5cdGdldFByb2xpZmVyYXRvcixcclxuXHRnZXRQcm9saWZlcmF0b3JBbGwsXHJcbn0gZnJvbSBcIn5hc3NldHMvZ2V0XCI7XHJcbmltcG9ydCB7IHByb2xpZmVyYXRvclRvSWNvblVSTCB9IGZyb20gXCJ+YXNzZXRzL2ljb25cIjtcclxuXHJcbnR5cGUgUHJvbGZpZXJhdG9yU2VsZWN0UHJvcHMgPSB7XHJcblx0dmFsdWU6IFByb2xpZmVyYXRvcjtcclxuXHRvbkNoYW5nZTogKHZhbHVlOiBQcm9saWZlcmF0b3IpID0+IHZvaWQ7XHJcblx0c3BlZWR1cE9ubHk6IGJvb2xlYW47XHJcbn07XHJcbmV4cG9ydCBjb25zdCBQcm9saWZlcmF0b3JTZWxlY3Q6IEZDPFxyXG5cdFByb2xmaWVyYXRvclNlbGVjdFByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7IG9uQ2hhbmdlLCB2YWx1ZSwgc3BlZWR1cE9ubHkgfSA9IHByb3BzO1xyXG5cclxuXHRjb25zdCB7IGN1cnJlbnQ6IG9wdGlvbnMgfSA9IHVzZVJlZihcclxuXHRcdGdldFByb2xpZmVyYXRvckFsbCgpLFxyXG5cdCk7XHJcblxyXG5cdGNvbnN0IGhhbmRsZUNoYW5nZSA9IChcclxuXHRcdGU6IFNlbGVjdENoYW5nZUV2ZW50PHN0cmluZz4sXHJcblx0KSA9PiB7XHJcblx0XHRjb25zdCBuZXh0ID0gZ2V0UHJvbGlmZXJhdG9yKGUudGFyZ2V0LnZhbHVlKTtcclxuXHRcdGlmIChuZXh0ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0b25DaGFuZ2UobmV4dCk7XHJcblx0fTtcclxuXHJcblx0Y29uc3QgYWN0aXZlT3B0aW9uczogUHJvbGlmZXJhdG9yW10gPSBbXTtcclxuXHRjb25zdCBkaXNhYmxlZE9wdGlvbnM6IFByb2xpZmVyYXRvcltdID0gW107XHJcblx0Zm9yIChjb25zdCBvcHQgb2Ygb3B0aW9ucykge1xyXG5cdFx0aWYgKFxyXG5cdFx0XHRzcGVlZHVwT25seSAmJlxyXG5cdFx0XHRvcHQubW9kZSA9PT0gUHJvbGlmZXJhdG9yTW9kZS5FWFRSQV9QUk9EVUNUU1xyXG5cdFx0KSB7XHJcblx0XHRcdGRpc2FibGVkT3B0aW9ucy5wdXNoKG9wdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRhY3RpdmVPcHRpb25zLnB1c2gob3B0KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbnN0IGFjdGl2ZUl0ZW1zID0gYWN0aXZlT3B0aW9ucy5tYXAoXHJcblx0XHQoaXRlbSkgPT4ge1xyXG5cdFx0XHRjb25zdCB7IGxhYmVsIH0gPSBpdGVtO1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxNZW51SXRlbVxyXG5cdFx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHRcdHZhbHVlPXtsYWJlbH1cclxuXHRcdFx0XHRcdGRpc2FibGVSaXBwbGVcclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHR7bGFiZWwgIT09IFwiTm9uZVwiICYmIChcclxuXHRcdFx0XHRcdFx0PExpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHRcdFx0XHQ8aW1nXHJcblx0XHRcdFx0XHRcdFx0XHRzcmM9e3Byb2xpZmVyYXRvclRvSWNvblVSTChpdGVtKX1cclxuXHRcdFx0XHRcdFx0XHRcdGFsdD17bGFiZWx9XHJcblx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0PC9MaXN0SXRlbUljb24+XHJcblx0XHRcdFx0XHQpfVxyXG5cdFx0XHRcdFx0PExpc3RJdGVtVGV4dD57bGFiZWx9PC9MaXN0SXRlbVRleHQ+XHJcblx0XHRcdFx0PC9NZW51SXRlbT5cclxuXHRcdFx0KTtcclxuXHRcdH0sXHJcblx0KTtcclxuXHJcblx0Y29uc3QgZGlzYWJsZWRJdGVtcyA9IGRpc2FibGVkT3B0aW9ucy5tYXAoXHJcblx0XHQoeyBsYWJlbCB9KSA9PiAoXHJcblx0XHRcdDxNZW51SXRlbVxyXG5cdFx0XHRcdGRpc2FibGVkXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHR2YWx1ZT17bGFiZWx9XHJcblx0XHRcdFx0ZGlzYWJsZVJpcHBsZVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PExpc3RJdGVtVGV4dD57bGFiZWx9PC9MaXN0SXRlbVRleHQ+XHJcblx0XHRcdDwvTWVudUl0ZW0+XHJcblx0XHQpLFxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8U2VsZWN0XHJcblx0XHRcdHNpemU9XCJzbWFsbFwiXHJcblx0XHRcdHZhbHVlPXt2YWx1ZS5sYWJlbH1cclxuXHRcdFx0b25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuXHRcdFx0U2VsZWN0RGlzcGxheVByb3BzPXt7XHJcblx0XHRcdFx0c3R5bGU6IHtcclxuXHRcdFx0XHRcdGRpc3BsYXk6IFwiZmxleFwiLFxyXG5cdFx0XHRcdFx0YWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9fVxyXG5cdFx0PlxyXG5cdFx0XHR7YWN0aXZlSXRlbXN9XHJcblx0XHRcdHtkaXNhYmxlZEl0ZW1zfVxyXG5cdFx0PC9TZWxlY3Q+XHJcblx0KTtcclxufTtcclxuIiwiaW1wb3J0IHsgUmVjaXBlIH0gZnJvbSBcIkBldXJ5ZG9zL2RzcC1pdGVtLXJlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7XHJcblx0TGlzdEl0ZW1JY29uLFxyXG5cdExpc3RJdGVtVGV4dCxcclxuXHRNZW51SXRlbSxcclxuXHRTZWxlY3QsXHJcblx0U2VsZWN0Q2hhbmdlRXZlbnQsXHJcbn0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgRkMsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge1xyXG5cdGdldFJlY2lwZSxcclxuXHRnZXRSZWNpcGVBbGwsXHJcbn0gZnJvbSBcIn5hc3NldHMvZ2V0XCI7XHJcbmltcG9ydCB7IHRvSWNvblVSTCB9IGZyb20gXCJ+YXNzZXRzL2ljb25cIjtcclxuXHJcbnR5cGUgUmVjaXBlU2VsZWN0UHJvcHMgPSB7XHJcblx0dmFsdWU6IFJlY2lwZTtcclxuXHRvbkNoYW5nZTogKG5leHQ6IFJlY2lwZSkgPT4gdm9pZDtcclxuXHRyZWNpcGVUeXBlOiBzdHJpbmc7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBSZWNpcGVTZWxlY3Q6IEZDPFxyXG5cdFJlY2lwZVNlbGVjdFByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7IG9uQ2hhbmdlLCB2YWx1ZSwgcmVjaXBlVHlwZSB9ID0gcHJvcHM7XHJcblxyXG5cdGNvbnN0IHsgY3VycmVudDogb3B0aW9ucyB9ID0gdXNlUmVmKFxyXG5cdFx0Z2V0UmVjaXBlQWxsKCksXHJcblx0KTtcclxuXHJcblx0Y29uc3QgaGFuZGxlQ2hhbmdlID0gKFxyXG5cdFx0ZTogU2VsZWN0Q2hhbmdlRXZlbnQ8c3RyaW5nPixcclxuXHQpID0+IHtcclxuXHRcdGNvbnN0IG5leHQgPSBnZXRSZWNpcGUoZS50YXJnZXQudmFsdWUpO1xyXG5cdFx0aWYgKG5leHQgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRvbkNoYW5nZShuZXh0KTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBhY3RpdmVPcHRpb25zOiBSZWNpcGVbXSA9IFtdO1xyXG5cdGNvbnN0IGRpc2FibGVkT3B0aW9uczogUmVjaXBlW10gPSBbXTtcclxuXHRmb3IgKGNvbnN0IG9wdCBvZiBvcHRpb25zKSB7XHJcblx0XHRpZiAob3B0LnJlY2lwZVR5cGUgPT09IHJlY2lwZVR5cGUpIHtcclxuXHRcdFx0YWN0aXZlT3B0aW9ucy5wdXNoKG9wdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkaXNhYmxlZE9wdGlvbnMucHVzaChvcHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Y29uc3QgYWN0aXZlSXRlbXMgPSBhY3RpdmVPcHRpb25zLm1hcChcclxuXHRcdCh7IGxhYmVsIH0pID0+IChcclxuXHRcdFx0PE1lbnVJdGVtXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHR2YWx1ZT17bGFiZWx9XHJcblx0XHRcdFx0ZGlzYWJsZVJpcHBsZVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PExpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHRcdDxpbWdcclxuXHRcdFx0XHRcdFx0c3JjPXt0b0ljb25VUkwobGFiZWwpfVxyXG5cdFx0XHRcdFx0XHRhbHQ9e2xhYmVsfVxyXG5cdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8L0xpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHQ8TGlzdEl0ZW1UZXh0PntsYWJlbH08L0xpc3RJdGVtVGV4dD5cclxuXHRcdFx0PC9NZW51SXRlbT5cclxuXHRcdCksXHJcblx0KTtcclxuXHJcblx0Y29uc3QgZGlzYWJsZWRJdGVtcyA9IGRpc2FibGVkT3B0aW9ucy5tYXAoXHJcblx0XHQoeyBsYWJlbCB9KSA9PiAoXHJcblx0XHRcdDxNZW51SXRlbVxyXG5cdFx0XHRcdGRpc2FibGVkXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHR2YWx1ZT17bGFiZWx9XHJcblx0XHRcdFx0ZGlzYWJsZVJpcHBsZVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PExpc3RJdGVtVGV4dD57bGFiZWx9PC9MaXN0SXRlbVRleHQ+XHJcblx0XHRcdDwvTWVudUl0ZW0+XHJcblx0XHQpLFxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8U2VsZWN0XHJcblx0XHRcdHNpemU9XCJzbWFsbFwiXHJcblx0XHRcdHZhbHVlPXt2YWx1ZS5sYWJlbH1cclxuXHRcdFx0b25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuXHRcdFx0U2VsZWN0RGlzcGxheVByb3BzPXt7XHJcblx0XHRcdFx0c3R5bGU6IHtcclxuXHRcdFx0XHRcdGRpc3BsYXk6IFwiZmxleFwiLFxyXG5cdFx0XHRcdFx0YWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9fVxyXG5cdFx0PlxyXG5cdFx0XHR7YWN0aXZlSXRlbXN9XHJcblx0XHRcdHtkaXNhYmxlZEl0ZW1zfVxyXG5cdFx0PC9TZWxlY3Q+XHJcblx0KTtcclxufTtcclxuIiwiaW1wb3J0IHsgUmVzdGFydEFsdFJvdW5kZWQgfSBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBJY29uQnV0dG9uLCBTdGFjayB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDLCBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU3R5bGVkVGV4dEZpZWxkIH0gZnJvbSBcIi4vU3R5bGVkVGV4dEZpZWxkXCI7XHJcblxyXG50eXBlIFNvcnRlckZpZWxkUHJvcHMgPSB7XHJcblx0cHJlZml4PzogUmVhY3ROb2RlO1xyXG5cdHN1ZmZpeD86IHN0cmluZztcclxuXHR2YWx1ZTogc3RyaW5nO1xyXG5cdGxhYmVsOiBzdHJpbmc7XHJcblx0b25DaGFuZ2U6IChrOiBzdHJpbmcsIHY6IHN0cmluZykgPT4gdm9pZDtcclxufTtcclxuZXhwb3J0IGNvbnN0IFN0eWxlZE51bWJlckZpZWxkOiBGQzxcclxuXHRTb3J0ZXJGaWVsZFByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7XHJcblx0XHRwcmVmaXgsXHJcblx0XHRzdWZmaXgsXHJcblx0XHR2YWx1ZSxcclxuXHRcdGxhYmVsLFxyXG5cdFx0b25DaGFuZ2UsXHJcblx0fSA9IHByb3BzO1xyXG5cclxuXHRjb25zdCBoYW5kbGVSZXNldCA9ICgpID0+IHtcclxuXHRcdG9uQ2hhbmdlKGxhYmVsLCBcIlwiKTtcclxuXHR9O1xyXG5cdGNvbnN0IGhhbmRsZUNoYW5nZSA9IChrOiBzdHJpbmcpID0+IHtcclxuXHRcdG9uQ2hhbmdlKGxhYmVsLCBrKTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PFN0YWNrXHJcblx0XHRcdGRpcmVjdGlvbj1cInJvd1wiXHJcblx0XHRcdGFsaWduSXRlbXM9XCJjZW50ZXJcIlxyXG5cdFx0PlxyXG5cdFx0XHQ8U3R5bGVkVGV4dEZpZWxkXHJcblx0XHRcdFx0bGFiZWw9e2xhYmVsfVxyXG5cdFx0XHRcdG1heExlbmd0aD17Nn1cclxuXHRcdFx0XHR2YWx1ZT17dmFsdWV9XHJcblx0XHRcdFx0b25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuXHRcdFx0XHRzdWZmaXg9e3N1ZmZpeH1cclxuXHRcdFx0XHRwcmVmaXg9e3ByZWZpeH1cclxuXHRcdFx0Lz5cclxuXHRcdFx0PEljb25CdXR0b25cclxuXHRcdFx0XHRkaXNhYmxlVG91Y2hSaXBwbGVcclxuXHRcdFx0XHRzaXplPVwic21hbGxcIlxyXG5cdFx0XHRcdGNvbG9yPVwicHJpbWFyeVwiXHJcblx0XHRcdFx0Y2hpbGRyZW49ezxSZXN0YXJ0QWx0Um91bmRlZCAvPn1cclxuXHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVSZXNldH1cclxuXHRcdFx0Lz5cclxuXHRcdDwvU3RhY2s+XHJcblx0KTtcclxufTtcclxuIiwiaW1wb3J0IHsgR0FNRV9WRVJTSU9OIH0gZnJvbSBcIkBldXJ5ZG9zL2RzcC1pdGVtLXJlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7IFN0YWNrLCBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgRkMgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdG9JY29uVVJMIH0gZnJvbSBcIn5hc3NldHMvaWNvblwiO1xyXG5pbXBvcnQgeyBDb2xsYXBzaWJsZSB9IGZyb20gXCJ+Y29tcG9uZW50cy9Db2xsYXBzaWJsZVwiO1xyXG5pbXBvcnQgeyBGYWNpbGl0eVNlbGVjdCB9IGZyb20gXCJ+Y29tcG9uZW50cy9GYWNpbGl0eVNlbGVjdFwiO1xyXG5pbXBvcnQgeyBGbG93cmF0ZUZpZWxkIH0gZnJvbSBcIn5jb21wb25lbnRzL0Zsb3dyYXRlRmllbGRcIjtcclxuaW1wb3J0IHsgUHJvbGZpZXJhdG9yU3ByYXlDb3VudEZpZWxkIH0gZnJvbSBcIn5jb21wb25lbnRzL1Byb2xmaWVyYXRvclNwcmF5Q291bnRGaWVsZFwiO1xyXG5pbXBvcnQgeyBQcm9saWZlcmF0b3JTZWxlY3QgfSBmcm9tIFwifmNvbXBvbmVudHMvUHJvbGlmZXJhdG9yU2VsZWN0XCI7XHJcbmltcG9ydCB7IFJlY2lwZVNlbGVjdCB9IGZyb20gXCJ+Y29tcG9uZW50cy9SZWNpcGVTZWxlY3RcIjtcclxuaW1wb3J0IHtcclxuXHRFZGl0b3JGb3JtRGF0YSxcclxuXHRFZGl0b3JGb3JtSGFuZGxlcnMsXHJcbn0gZnJvbSBcIn50eXBlcy9xdWVyeVwiO1xyXG5pbXBvcnQgeyBTdHlsZWROdW1iZXJGaWVsZCB9IGZyb20gXCIuL1N0eWxlZE51bWJlckZpZWxkXCI7XHJcblxyXG5leHBvcnQgdHlwZSBDb25maWdGb3JtUHJvcHMgPSB7XHJcblx0ZGF0YTogRWRpdG9yRm9ybURhdGE7XHJcblx0aGFuZGxlcnM6IEVkaXRvckZvcm1IYW5kbGVycztcclxufTtcclxuZXhwb3J0IGNvbnN0IENvbmZpZ0Zvcm06IEZDPENvbmZpZ0Zvcm1Qcm9wcz4gPSAoXHJcblx0cHJvcHMsXHJcbikgPT4ge1xyXG5cdGNvbnN0IHsgZGF0YSwgaGFuZGxlcnMgfSA9IHByb3BzO1xyXG5cclxuXHRjb25zdCBmbG93cmF0ZUZpZWxkR3JvdXAgPSBPYmplY3QuZW50cmllcyhcclxuXHRcdGRhdGEuZmxvd3JhdGUsXHJcblx0KS5tYXAoKFtsYWJlbCwgdmFsdWVdKSA9PiAoXHJcblx0XHQ8Rmxvd3JhdGVGaWVsZFxyXG5cdFx0XHRrZXk9e2xhYmVsfVxyXG5cdFx0XHR2YWx1ZT17dmFsdWV9XHJcblx0XHRcdGxhYmVsPXtsYWJlbH1cclxuXHRcdFx0b25DaGFuZ2U9e2hhbmRsZXJzLmhhbmRsZUZsb3dyYXRlQ2hhbmdlfVxyXG5cdFx0Lz5cclxuXHQpKTtcclxuXHJcblx0Y29uc3Qgc29ydGVyRmllbGRHcm91cCA9IE9iamVjdC5lbnRyaWVzKFxyXG5cdFx0ZGF0YS5zb3J0ZXIsXHJcblx0KS5tYXAoKFtsYWJlbCwgdmFsdWVdKSA9PiAoXHJcblx0XHQ8U3R5bGVkTnVtYmVyRmllbGRcclxuXHRcdFx0cHJlZml4PXtcclxuXHRcdFx0XHQ8aW1nXHJcblx0XHRcdFx0XHRzcmM9e3RvSWNvblVSTChsYWJlbCl9XHJcblx0XHRcdFx0XHRhbHQ9e2xhYmVsfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdH1cclxuXHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0bGFiZWw9e2xhYmVsfVxyXG5cdFx0XHR2YWx1ZT17dmFsdWV9XHJcblx0XHRcdG9uQ2hhbmdlPXtoYW5kbGVycy5oYW5kbGVTb3J0ZXJDaGFuZ2V9XHJcblx0XHQvPlxyXG5cdCkpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PFN0YWNrIHNwYWNpbmc9ezJ9PlxyXG5cdFx0XHQ8VHlwb2dyYXBoeVxyXG5cdFx0XHRcdGZvbnRXZWlnaHQ9XCI2MDBcIlxyXG5cdFx0XHRcdGZvbnRTaXplPVwieC1sYXJnZVwiXHJcblx0XHRcdFx0Y29sb3I9XCJzZWNvbmRhcnkubWFpblwiXHJcblx0XHRcdD5cclxuXHRcdFx0XHRDb25maWd1cmF0aW9uXHJcblx0XHRcdDwvVHlwb2dyYXBoeT5cclxuXHRcdFx0PFR5cG9ncmFwaHlcclxuXHRcdFx0XHRmb250V2VpZ2h0PVwiNDAwXCJcclxuXHRcdFx0XHRmb250U2l6ZT1cInNtYWxsXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdERTUCB2ZXJzaW9uOiB7R0FNRV9WRVJTSU9OfVxyXG5cdFx0XHQ8L1R5cG9ncmFwaHk+XHJcblx0XHRcdDxDb2xsYXBzaWJsZSB0aXRsZT1cIk1hbnVmYWN0dXJpbmdcIj5cclxuXHRcdFx0XHQ8RmFjaWxpdHlTZWxlY3RcclxuXHRcdFx0XHRcdHZhbHVlPXtkYXRhLmZhY2lsaXR5fVxyXG5cdFx0XHRcdFx0b25DaGFuZ2U9e2hhbmRsZXJzLmhhbmRsZUZhY2lsaXR5Q2hhbmdlfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PFJlY2lwZVNlbGVjdFxyXG5cdFx0XHRcdFx0dmFsdWU9e2RhdGEucmVjaXBlfVxyXG5cdFx0XHRcdFx0b25DaGFuZ2U9e2hhbmRsZXJzLmhhbmRsZVJlY2lwZUNoYW5nZX1cclxuXHRcdFx0XHRcdHJlY2lwZVR5cGU9e2RhdGEuZmFjaWxpdHkucmVjaXBlVHlwZX1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHQ8L0NvbGxhcHNpYmxlPlxyXG5cdFx0XHQ8Q29sbGFwc2libGUgdGl0bGU9XCJUcmFuc3BvcnQgY2FwYWNpdHlcIj5cclxuXHRcdFx0XHQ8U3RhY2sgc3BhY2luZz17MX0+XHJcblx0XHRcdFx0XHR7Zmxvd3JhdGVGaWVsZEdyb3VwfVxyXG5cdFx0XHRcdDwvU3RhY2s+XHJcblx0XHRcdDwvQ29sbGFwc2libGU+XHJcblx0XHRcdDxDb2xsYXBzaWJsZSB0aXRsZT1cIlByb2xpZmVyYXRpb25cIj5cclxuXHRcdFx0XHQ8UHJvbGlmZXJhdG9yU2VsZWN0XHJcblx0XHRcdFx0XHR2YWx1ZT17ZGF0YS5wcm9saWZlcmF0b3J9XHJcblx0XHRcdFx0XHRzcGVlZHVwT25seT17ZGF0YS5yZWNpcGUuc3BlZWR1cE9ubHl9XHJcblx0XHRcdFx0XHRvbkNoYW5nZT17XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmhhbmRsZVByb2xpZmVyYXRvckNoYW5nZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdFx0PFByb2xmaWVyYXRvclNwcmF5Q291bnRGaWVsZFxyXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlPXtkYXRhLnByb2xpZmVyYXRvci5zcHJheUNvdW50LnRvU3RyaW5nKCl9XHJcblx0XHRcdFx0XHR2YWx1ZT17ZGF0YS5wcm9saWZlcmF0b3JTcHJheUNvdW50fVxyXG5cdFx0XHRcdFx0ZGlzYWJsZWQ9e1xyXG5cdFx0XHRcdFx0XHRkYXRhLnByb2xpZmVyYXRvci5sYWJlbCA9PT0gXCJOb25lXCJcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtcclxuXHRcdFx0XHRcdFx0aGFuZGxlcnMuaGFuZGxlUHJvbGlmZXJhdG9yU3ByYXlDb3VudENoYW5nZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvQ29sbGFwc2libGU+XHJcblx0XHRcdDxDb2xsYXBzaWJsZSB0aXRsZT1cIlNvcnRlciBjb25uZWN0aW9uc1wiPlxyXG5cdFx0XHRcdDxTdGFjayBzcGFjaW5nPXsxfT5cclxuXHRcdFx0XHRcdHtzb3J0ZXJGaWVsZEdyb3VwfVxyXG5cdFx0XHRcdDwvU3RhY2s+XHJcblx0XHRcdDwvQ29sbGFwc2libGU+XHJcblx0XHQ8L1N0YWNrPlxyXG5cdCk7XHJcbn07XHJcbiIsImltcG9ydCB7IFRhYmxlQ2VsbCwgc3R5bGVkIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRUYWJsZUhlYWRDZWxsID0gc3R5bGVkKFxyXG5cdFRhYmxlQ2VsbCxcclxuKSgoeyB0aGVtZSB9KSA9PiAoe1xyXG5cdGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxyXG59KSk7XHJcbiIsImNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChcImVuLVVTXCIsIHtcclxuXHRtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHM6IDYsXHJcblx0c2lnbkRpc3BsYXk6IFwiZXhjZXB0WmVyb1wiLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBmb3JtYXROdW1iZXIgPSAoXHJcblx0dmFsdWU6IG51bWJlcixcclxuKTogc3RyaW5nID0+IHtcclxuXHRyZXR1cm4gZm9ybWF0dGVyLmZvcm1hdCh2YWx1ZSk7XHJcbn07XHJcbiIsImltcG9ydCB7XHJcblx0VGFibGUsXHJcblx0VGFibGVCb2R5LFxyXG5cdFRhYmxlQ2VsbCxcclxuXHRUYWJsZUNvbnRhaW5lcixcclxuXHRUYWJsZUhlYWQsXHJcblx0VGFibGVSb3csXHJcbn0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgRkMgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZ2V0UHJvbGlmZXJhdG9yIH0gZnJvbSBcIn5hc3NldHMvZ2V0XCI7XHJcbmltcG9ydCB7XHJcblx0cHJvbGlmZXJhdG9yVG9JY29uVVJMLFxyXG5cdHRvSWNvblVSTCxcclxufSBmcm9tIFwifmFzc2V0cy9pY29uXCI7XHJcbmltcG9ydCB7IFBhZGRlZFBhcGVyIH0gZnJvbSBcIn5jb21wb25lbnRzL1BhZGRlZFBhcGVyXCI7XHJcbmltcG9ydCB7IFN0eWxlZFRhYmxlSGVhZENlbGwgfSBmcm9tIFwifmNvbXBvbmVudHMvU3R5bGVkVGFibGVIZWFkQ2VsbFwiO1xyXG5pbXBvcnQgeyBmb3JtYXROdW1iZXIgfSBmcm9tIFwifmNvcmUvZm9ybWF0dGluZ1wiO1xyXG5pbXBvcnQge1xyXG5cdEZsb3dEYXRhLFxyXG5cdFBsYWNlbWVudERhdGEsXHJcbn0gZnJvbSBcIn50eXBlcy9xdWVyeVwiO1xyXG5cclxudHlwZSBTdHlsZWRUYWJsZVJvd1Byb3BzID0ge1xyXG5cdGxhYmVsOiBzdHJpbmc7XHJcblx0cGVyRmFjaWxpdHk6IG51bWJlcjtcclxuXHRwZXJBcnJheTogbnVtYmVyO1xyXG5cdHBlclRvdGFsOiBudW1iZXI7XHJcbn07XHJcbmNvbnN0IFN0eWxlZFRhYmxlUm93OiBGQzxTdHlsZWRUYWJsZVJvd1Byb3BzPiA9IChcclxuXHRwcm9wcyxcclxuKSA9PiB7XHJcblx0Y29uc3Qge1xyXG5cdFx0bGFiZWwsXHJcblx0XHRwZXJBcnJheSxcclxuXHRcdHBlckZhY2lsaXR5LFxyXG5cdFx0cGVyVG90YWwsXHJcblx0fSA9IHByb3BzO1xyXG5cclxuXHRjb25zdCBpdGVtcyA9IFtwZXJUb3RhbCwgcGVyQXJyYXksIHBlckZhY2lsaXR5XTtcclxuXHRjb25zdCB0YWJsZUNlbGxzID0gaXRlbXMubWFwKChkYXRhLCBpbmRleCkgPT4gKFxyXG5cdFx0PFRhYmxlQ2VsbFxyXG5cdFx0XHRrZXk9e2Ake2xhYmVsfS0ke2luZGV4fWB9XHJcblx0XHRcdGNvbFNwYW49ezF9XHJcblx0XHRcdGFsaWduPVwicmlnaHRcIlxyXG5cdFx0XHRjaGlsZHJlbj17Zm9ybWF0TnVtYmVyKGRhdGEpfVxyXG5cdFx0Lz5cclxuXHQpKTtcclxuXHJcblx0bGV0IGljb25VUkwgPSB0b0ljb25VUkwobGFiZWwpO1xyXG5cdGlmIChcclxuXHRcdGxhYmVsLmluY2x1ZGVzKFwiKG1hdGVyaWFscylcIikgfHxcclxuXHRcdGxhYmVsLmluY2x1ZGVzKFwiKHByb2R1Y3RzKVwiKVxyXG5cdCkge1xyXG5cdFx0Y29uc3QgcCA9IGdldFByb2xpZmVyYXRvcihcclxuXHRcdFx0bGFiZWxcclxuXHRcdFx0XHQucmVwbGFjZUFsbChcIihtYXRlcmlhbHMpXCIsIFwiXCIpXHJcblx0XHRcdFx0LnJlcGxhY2VBbGwoXCIocHJvZHVjdHMpXCIsIFwiXCIpXHJcblx0XHRcdFx0LnRyaW0oKSxcclxuXHRcdCk7XHJcblx0XHRpZiAocCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGljb25VUkwgPSBwcm9saWZlcmF0b3JUb0ljb25VUkwocCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiAoXHJcblx0XHQ8VGFibGVSb3c+XHJcblx0XHRcdDxUYWJsZUNlbGxcclxuXHRcdFx0XHRjb2xTcGFuPXsxfVxyXG5cdFx0XHRcdHN4PXt7XHJcblx0XHRcdFx0XHRkaXNwbGF5OiBcImZsZXhcIixcclxuXHRcdFx0XHRcdGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxyXG5cdFx0XHRcdH19XHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8aW1nXHJcblx0XHRcdFx0XHRhbHQ9e2xhYmVsfVxyXG5cdFx0XHRcdFx0c3JjPXtpY29uVVJMfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvVGFibGVDZWxsPlxyXG5cdFx0XHQ8VGFibGVDZWxsXHJcblx0XHRcdFx0Y29sU3Bhbj17Mn1cclxuXHRcdFx0XHRjaGlsZHJlbj17bGFiZWx9XHJcblx0XHRcdC8+XHJcblx0XHRcdHt0YWJsZUNlbGxzfVxyXG5cdFx0PC9UYWJsZVJvdz5cclxuXHQpO1xyXG59O1xyXG5cclxuY29uc3QgU3R5bGVkVGFibGVIZWFkOiBGQyA9ICgpID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PFRhYmxlUm93PlxyXG5cdFx0XHQ8VGFibGVDZWxsIGNvbFNwYW49ezF9IC8+XHJcblx0XHRcdDxTdHlsZWRUYWJsZUhlYWRDZWxsXHJcblx0XHRcdFx0Y29sU3Bhbj17Mn1cclxuXHRcdFx0XHRjaGlsZHJlbj1cIkZsb3cgKHBlciBtaW51dGUpXCJcclxuXHRcdFx0Lz5cclxuXHRcdFx0PFN0eWxlZFRhYmxlSGVhZENlbGxcclxuXHRcdFx0XHRjb2xTcGFuPXsxfVxyXG5cdFx0XHRcdGFsaWduPVwicmlnaHRcIlxyXG5cdFx0XHRcdGNoaWxkcmVuPVwiVG90YWxcIlxyXG5cdFx0XHQvPlxyXG5cdFx0XHQ8U3R5bGVkVGFibGVIZWFkQ2VsbFxyXG5cdFx0XHRcdGNvbFNwYW49ezF9XHJcblx0XHRcdFx0YWxpZ249XCJyaWdodFwiXHJcblx0XHRcdFx0Y2hpbGRyZW49XCJQZXIgYXJyYXlcIlxyXG5cdFx0XHQvPlxyXG5cdFx0XHQ8U3R5bGVkVGFibGVIZWFkQ2VsbFxyXG5cdFx0XHRcdGNvbFNwYW49ezF9XHJcblx0XHRcdFx0YWxpZ249XCJyaWdodFwiXHJcblx0XHRcdFx0Y2hpbGRyZW49XCJQZXIgZmFjaWxpdHlcIlxyXG5cdFx0XHQvPlxyXG5cdFx0PC9UYWJsZVJvdz5cclxuXHQpO1xyXG59O1xyXG5cclxudHlwZSBGbG93cmF0ZVRhYmxlUHJvcHMgPSB7XHJcblx0ZGF0YTogRmxvd0RhdGE7XHJcblx0cGxhY2VtZW50OiBQbGFjZW1lbnREYXRhO1xyXG59O1xyXG5leHBvcnQgY29uc3QgRmxvd3JhdGVUYWJsZTogRkM8XHJcblx0Rmxvd3JhdGVUYWJsZVByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7IGRhdGEsIHBsYWNlbWVudCB9ID0gcHJvcHM7XHJcblx0Y29uc3Qge1xyXG5cdFx0bWF0ZXJpYWxGbG93UGVyTWludXRlUGVyRmFjaWxpdHksXHJcblx0XHRwcm9kdWN0Rmxvd1Blck1pbnV0ZVBlckZhY2lsaXR5LFxyXG5cdH0gPSBkYXRhO1xyXG5cdGNvbnN0IHsgZmFjaWxpdGllc05lZWRlZCwgZmFjaWxpdGllc1BlckFycmF5IH0gPVxyXG5cdFx0cGxhY2VtZW50O1xyXG5cclxuXHRjb25zdCByZW5kZXJlZE1hdGVyaWFsUm93cyA9IE9iamVjdC5lbnRyaWVzKFxyXG5cdFx0bWF0ZXJpYWxGbG93UGVyTWludXRlUGVyRmFjaWxpdHksXHJcblx0KS5tYXAoKFtsYWJlbCwgdmFsdWVdLCBpbmRleCkgPT4gKFxyXG5cdFx0PFN0eWxlZFRhYmxlUm93XHJcblx0XHRcdGtleT17YG0tJHtsYWJlbH0tJHtpbmRleH1gfVxyXG5cdFx0XHRsYWJlbD17bGFiZWx9XHJcblx0XHRcdHBlckZhY2lsaXR5PXstdmFsdWV9XHJcblx0XHRcdHBlckFycmF5PXstdmFsdWUgKiBmYWNpbGl0aWVzTmVlZGVkfVxyXG5cdFx0XHRwZXJUb3RhbD17LXZhbHVlICogZmFjaWxpdGllc1BlckFycmF5fVxyXG5cdFx0Lz5cclxuXHQpKTtcclxuXHJcblx0Y29uc3QgcmVuZGVyZWRQcm9kdWN0Um93cyA9IE9iamVjdC5lbnRyaWVzKFxyXG5cdFx0cHJvZHVjdEZsb3dQZXJNaW51dGVQZXJGYWNpbGl0eSxcclxuXHQpLm1hcCgoW2xhYmVsLCB2YWx1ZV0sIGluZGV4KSA9PiAoXHJcblx0XHQ8U3R5bGVkVGFibGVSb3dcclxuXHRcdFx0a2V5PXtgcHJvZC0ke2xhYmVsfS0ke2luZGV4fWB9XHJcblx0XHRcdGxhYmVsPXtsYWJlbH1cclxuXHRcdFx0cGVyRmFjaWxpdHk9e3ZhbHVlfVxyXG5cdFx0XHRwZXJBcnJheT17dmFsdWUgKiBmYWNpbGl0aWVzTmVlZGVkfVxyXG5cdFx0XHRwZXJUb3RhbD17dmFsdWUgKiBmYWNpbGl0aWVzUGVyQXJyYXl9XHJcblx0XHQvPlxyXG5cdCkpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PFBhZGRlZFBhcGVyXHJcblx0XHRcdHNxdWFyZVxyXG5cdFx0XHRlbGV2YXRpb249ezJ9XHJcblx0XHQ+XHJcblx0XHRcdDxUYWJsZUNvbnRhaW5lcj5cclxuXHRcdFx0XHQ8VGFibGU+XHJcblx0XHRcdFx0XHQ8VGFibGVIZWFkPlxyXG5cdFx0XHRcdFx0XHQ8U3R5bGVkVGFibGVIZWFkIC8+XHJcblx0XHRcdFx0XHQ8L1RhYmxlSGVhZD5cclxuXHRcdFx0XHRcdDxUYWJsZUJvZHk+XHJcblx0XHRcdFx0XHRcdHtyZW5kZXJlZE1hdGVyaWFsUm93c31cclxuXHRcdFx0XHRcdFx0e3JlbmRlcmVkUHJvZHVjdFJvd3N9XHJcblx0XHRcdFx0XHQ8L1RhYmxlQm9keT5cclxuXHRcdFx0XHQ8L1RhYmxlPlxyXG5cdFx0XHQ8L1RhYmxlQ29udGFpbmVyPlxyXG5cdFx0PC9QYWRkZWRQYXBlcj5cclxuXHQpO1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG5cdEZhY2lsaXR5LFxyXG5cdFByb2xpZmVyYXRvcixcclxuXHRSZWNpcGUsXHJcbn0gZnJvbSBcIkBldXJ5ZG9zL2RzcC1pdGVtLXJlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7XHJcblx0QWJjUm91bmRlZCxcclxuXHRBZGRSb3VuZGVkLFxyXG5cdEJvbHRSb3VuZGVkLFxyXG5cdENhdGVnb3J5Um91bmRlZCxcclxuXHREYXRhU2F2ZXJPZmZSb3VuZGVkLFxyXG5cdEZhY3RvcnlSb3VuZGVkLFxyXG5cdFJlbW92ZVJvdW5kZWQsXHJcblx0U3BlZWRSb3VuZGVkLFxyXG5cdFVzYlJvdW5kZWQsXHJcbn0gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHtcclxuXHRCb3gsXHJcblx0R3JpZCxcclxuXHRMaXN0LFxyXG5cdExpc3RJdGVtLFxyXG5cdExpc3RJdGVtSWNvbixcclxuXHRMaXN0SXRlbVRleHQsXHJcblx0TGlzdFN1YmhlYWRlcixcclxufSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBGQywgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGZvcm1hdE51bWJlciB9IGZyb20gXCJ+Y29yZS9mb3JtYXR0aW5nXCI7XHJcbmltcG9ydCB7XHJcblx0RWRpdG9yRm9ybURhdGEsXHJcblx0UGxhY2VtZW50RGF0YSxcclxufSBmcm9tIFwifnR5cGVzL3F1ZXJ5XCI7XHJcbmltcG9ydCB7IFBhZGRlZFBhcGVyIH0gZnJvbSBcIi4vUGFkZGVkUGFwZXJcIjtcclxudHlwZSBQbGFjZW1lbnRJbmZvUHJvcHMgPSB7XHJcblx0cGxhY2VtZW50OiBQbGFjZW1lbnREYXRhO1xyXG59O1xyXG5jb25zdCBQbGFjZW1lbnRJbmZvOiBGQzxQbGFjZW1lbnRJbmZvUHJvcHM+ID0gKFxyXG5cdHByb3BzLFxyXG4pID0+IHtcclxuXHRjb25zdCB7IHBsYWNlbWVudCB9ID0gcHJvcHM7XHJcblx0Y29uc3QgeyBjdXJyZW50OiBpdGVtcyB9ID0gdXNlUmVmKFtcclxuXHRcdHtcclxuXHRcdFx0aWNvbjogPEZhY3RvcnlSb3VuZGVkIGNvbG9yPVwic2Vjb25kYXJ5XCIgLz4sXHJcblx0XHRcdHJlbmRlcjogKHg6IFBsYWNlbWVudERhdGEpID0+XHJcblx0XHRcdFx0eC5mYWNpbGl0aWVzUGVyQXJyYXksXHJcblx0XHRcdGxhYmVsOiBcIkZhY2lsaXRpZXMgcGVyIGFycmF5XCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpY29uOiA8RmFjdG9yeVJvdW5kZWQgY29sb3I9XCJzZWNvbmRhcnlcIiAvPixcclxuXHRcdFx0cmVuZGVyOiAoeDogUGxhY2VtZW50RGF0YSkgPT5cclxuXHRcdFx0XHR4LmFycmF5c05lZWRlZCxcclxuXHRcdFx0bGFiZWw6IFwiQXJyYXlzIG5lZWRlZFwiLFxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0aWNvbjogPEZhY3RvcnlSb3VuZGVkIGNvbG9yPVwic2Vjb25kYXJ5XCIgLz4sXHJcblx0XHRcdHJlbmRlcjogKHg6IFBsYWNlbWVudERhdGEpID0+XHJcblx0XHRcdFx0eC5mYWNpbGl0aWVzTmVlZGVkLFxyXG5cdFx0XHRsYWJlbDogXCJUb3RhbCBmYWNpbGl0aWVzIG5lZWRlZFwiLFxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0aWNvbjogPEZhY3RvcnlSb3VuZGVkIGNvbG9yPVwic2Vjb25kYXJ5XCIgLz4sXHJcblx0XHRcdHJlbmRlcjogKHg6IFBsYWNlbWVudERhdGEpID0+XHJcblx0XHRcdFx0eC5sZWZ0b3ZlckZhY2lsaXRpZXMsXHJcblx0XHRcdGxhYmVsOiBcIkxlZnRvdmVyIGZhY2lsaXRpZXNcIixcclxuXHRcdH0sXHJcblx0XSk7XHJcblxyXG5cdGNvbnN0IHJlbmRlcmVkSXRlbXMgPSBpdGVtcy5tYXAoXHJcblx0XHQoeyBpY29uLCBsYWJlbCwgcmVuZGVyIH0pID0+IChcclxuXHRcdFx0PExpc3RJdGVtXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHRkaXNhYmxlR3V0dGVyc1xyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PExpc3RJdGVtSWNvbj57aWNvbn08L0xpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHQ8TGlzdEl0ZW1UZXh0XHJcblx0XHRcdFx0XHRwcmltYXJ5PXtsYWJlbH1cclxuXHRcdFx0XHRcdHNlY29uZGFyeT17cmVuZGVyKHBsYWNlbWVudCl9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0PC9MaXN0SXRlbT5cclxuXHRcdCksXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxQYWRkZWRQYXBlclxyXG5cdFx0XHRzcXVhcmVcclxuXHRcdFx0ZWxldmF0aW9uPXsyfVxyXG5cdFx0PlxyXG5cdFx0XHQ8TGlzdFxyXG5cdFx0XHRcdGRlbnNlXHJcblx0XHRcdFx0ZGlzYWJsZVBhZGRpbmdcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxMaXN0U3ViaGVhZGVyXHJcblx0XHRcdFx0XHRkaXNhYmxlR3V0dGVyc1xyXG5cdFx0XHRcdFx0ZGlzYWJsZVN0aWNreVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdFBsYWNlbWVudFxyXG5cdFx0XHRcdDwvTGlzdFN1YmhlYWRlcj5cclxuXHRcdFx0XHR7cmVuZGVyZWRJdGVtc31cclxuXHRcdFx0PC9MaXN0PlxyXG5cdFx0PC9QYWRkZWRQYXBlcj5cclxuXHQpO1xyXG59O1xyXG50eXBlIFJlY2lwZUluZm9Qcm9wcyA9IHtcclxuXHRyZWNpcGU6IFJlY2lwZTtcclxufTtcclxuY29uc3QgUmVjaXBlSW5mbzogRkM8UmVjaXBlSW5mb1Byb3BzPiA9IChcclxuXHRwcm9wcyxcclxuKSA9PiB7XHJcblx0Y29uc3QgeyByZWNpcGUgfSA9IHByb3BzO1xyXG5cdGNvbnN0IHsgY3VycmVudDogaXRlbXMgfSA9IHVzZVJlZihbXHJcblx0XHR7XHJcblx0XHRcdGljb246IDxTcGVlZFJvdW5kZWQgY29sb3I9XCJzZWNvbmRhcnlcIiAvPixcclxuXHRcdFx0cmVuZGVyOiAocmVjaXBlOiBSZWNpcGUpID0+XHJcblx0XHRcdFx0YCR7cmVjaXBlLmN5Y2xlVGltZVNlY29uZH0gc2AsXHJcblx0XHRcdGxhYmVsOiBcIkN5Y2xlIHRpbWVcIixcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdGljb246IChcclxuXHRcdFx0XHQ8RGF0YVNhdmVyT2ZmUm91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+XHJcblx0XHRcdCksXHJcblx0XHRcdHJlbmRlcjogKHJlY2lwZTogUmVjaXBlKSA9PlxyXG5cdFx0XHRcdHJlY2lwZS5zcGVlZHVwT25seSA/IFwiTm9cIiA6IFwiWWVzXCIsXHJcblx0XHRcdGxhYmVsOiBcIkV4dHJhIHByb2R1Y3RzIGJvbnVzXCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpY29uOiA8UmVtb3ZlUm91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+LFxyXG5cdFx0XHRyZW5kZXI6IChyZWNpcGU6IFJlY2lwZSkgPT5cclxuXHRcdFx0XHRPYmplY3QuZW50cmllcyhyZWNpcGUubWF0ZXJpYWxSZWNvcmQpLm1hcChcclxuXHRcdFx0XHRcdChbbGFiZWwsIHJhdGlvXSkgPT4gYCR7cmF0aW99ICR7bGFiZWx9YCxcclxuXHRcdFx0XHQpLFxyXG5cdFx0XHRsYWJlbDogXCJNYXRlcmlhbHNcIixcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdGljb246IDxBZGRSb3VuZGVkIGNvbG9yPVwic2Vjb25kYXJ5XCIgLz4sXHJcblx0XHRcdHJlbmRlcjogKHJlY2lwZTogUmVjaXBlKSA9PlxyXG5cdFx0XHRcdE9iamVjdC5lbnRyaWVzKHJlY2lwZS5wcm9kdWN0UmVjb3JkKS5tYXAoXHJcblx0XHRcdFx0XHQoW2xhYmVsLCByYXRpb10pID0+IGAke3JhdGlvfSAke2xhYmVsfWAsXHJcblx0XHRcdFx0KSxcclxuXHRcdFx0bGFiZWw6IFwiUHJvZHVjdHNcIixcclxuXHRcdH0sXHJcblx0XSk7XHJcblxyXG5cdGNvbnN0IHJlbmRlcmVkSXRlbXMgPSBpdGVtcy5tYXAoXHJcblx0XHQoeyBpY29uLCBsYWJlbCwgcmVuZGVyIH0pID0+IChcclxuXHRcdFx0PExpc3RJdGVtXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHRkaXNhYmxlR3V0dGVyc1xyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PExpc3RJdGVtSWNvbj57aWNvbn08L0xpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHQ8TGlzdEl0ZW1UZXh0XHJcblx0XHRcdFx0XHRwcmltYXJ5PXtsYWJlbH1cclxuXHRcdFx0XHRcdHNlY29uZGFyeT17cmVuZGVyKHJlY2lwZSl9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0PC9MaXN0SXRlbT5cclxuXHRcdCksXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxQYWRkZWRQYXBlclxyXG5cdFx0XHRzcXVhcmVcclxuXHRcdFx0ZWxldmF0aW9uPXsyfVxyXG5cdFx0PlxyXG5cdFx0XHQ8TGlzdFxyXG5cdFx0XHRcdGRlbnNlXHJcblx0XHRcdFx0ZGlzYWJsZVBhZGRpbmdcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxMaXN0U3ViaGVhZGVyXHJcblx0XHRcdFx0XHRkaXNhYmxlR3V0dGVyc1xyXG5cdFx0XHRcdFx0ZGlzYWJsZVN0aWNreVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdFJlY2lwZSBJbmZvcm1hdGlvblxyXG5cdFx0XHRcdDwvTGlzdFN1YmhlYWRlcj5cclxuXHRcdFx0XHR7cmVuZGVyZWRJdGVtc31cclxuXHRcdFx0PC9MaXN0PlxyXG5cdFx0PC9QYWRkZWRQYXBlcj5cclxuXHQpO1xyXG59O1xyXG50eXBlIFByb2xpZmVyYXRvckluZm9Qcm9wcyA9IHtcclxuXHRwcm9saWZlcmF0b3I6IFByb2xpZmVyYXRvcjtcclxufTtcclxuY29uc3QgUHJvbGlmZXJhdG9ySW5mbzogRkM8XHJcblx0UHJvbGlmZXJhdG9ySW5mb1Byb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7IHByb2xpZmVyYXRvciB9ID0gcHJvcHM7XHJcblx0Y29uc3QgeyBjdXJyZW50OiBpdGVtcyB9ID0gdXNlUmVmKFtcclxuXHRcdHtcclxuXHRcdFx0aWNvbjogPFNwZWVkUm91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+LFxyXG5cdFx0XHRyZW5kZXI6IChwcm9saWY6IFByb2xpZmVyYXRvcikgPT5cclxuXHRcdFx0XHRgJHtmb3JtYXROdW1iZXIoXHJcblx0XHRcdFx0XHQocHJvbGlmLmN5Y2xlTXVsdGlwbGllciAtIDEpICogMTAwLFxyXG5cdFx0XHRcdCl9JWAsXHJcblx0XHRcdGxhYmVsOiBcIkJvbnVzIGN5Y2xlIHNwZWVkXCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpY29uOiA8U3BlZWRSb3VuZGVkIGNvbG9yPVwic2Vjb25kYXJ5XCIgLz4sXHJcblx0XHRcdHJlbmRlcjogKHByb2xpZjogUHJvbGlmZXJhdG9yKSA9PlxyXG5cdFx0XHRcdGAke2Zvcm1hdE51bWJlcihcclxuXHRcdFx0XHRcdChwcm9saWYucHJvZHVjdE11bHRpcGxpZXIgLSAxKSAqIDEwMCxcclxuXHRcdFx0XHQpfSVgLFxyXG5cdFx0XHRsYWJlbDogXCJCb251cyBwcm9kdWN0cyBwZXIgY3ljbGVcIixcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdGljb246IDxCb2x0Um91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+LFxyXG5cdFx0XHRyZW5kZXI6IChwcm9saWY6IFByb2xpZmVyYXRvcikgPT5cclxuXHRcdFx0XHRgJHtmb3JtYXROdW1iZXIoXHJcblx0XHRcdFx0XHQocHJvbGlmLndvcmtDb25zdW1wdGlvbk11bHRpcGxpZXIgLSAxKSAqXHJcblx0XHRcdFx0XHRcdDEwMCxcclxuXHRcdFx0XHQpfSVgLFxyXG5cdFx0XHRsYWJlbDogXCJBZGRpdGlvbmFsIHdvcmsgY29uc3VtcHRpb25cIixcclxuXHRcdH0sXHJcblx0XSk7XHJcblxyXG5cdGNvbnN0IHJlbmRlcmVkSXRlbXMgPSBpdGVtcy5tYXAoXHJcblx0XHQoeyBpY29uLCBsYWJlbCwgcmVuZGVyIH0pID0+IChcclxuXHRcdFx0PExpc3RJdGVtXHJcblx0XHRcdFx0a2V5PXtsYWJlbH1cclxuXHRcdFx0XHRkaXNhYmxlR3V0dGVyc1xyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PExpc3RJdGVtSWNvbj57aWNvbn08L0xpc3RJdGVtSWNvbj5cclxuXHRcdFx0XHQ8TGlzdEl0ZW1UZXh0XHJcblx0XHRcdFx0XHRwcmltYXJ5PXtsYWJlbH1cclxuXHRcdFx0XHRcdHNlY29uZGFyeT17cmVuZGVyKHByb2xpZmVyYXRvcil9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0PC9MaXN0SXRlbT5cclxuXHRcdCksXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxQYWRkZWRQYXBlclxyXG5cdFx0XHRzcXVhcmVcclxuXHRcdFx0ZWxldmF0aW9uPXsyfVxyXG5cdFx0PlxyXG5cdFx0XHQ8TGlzdFxyXG5cdFx0XHRcdGRlbnNlXHJcblx0XHRcdFx0ZGlzYWJsZVBhZGRpbmdcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxMaXN0U3ViaGVhZGVyXHJcblx0XHRcdFx0XHRkaXNhYmxlR3V0dGVyc1xyXG5cdFx0XHRcdFx0ZGlzYWJsZVN0aWNreVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdFByb2xpZmVyYXRvciBlZmZlY3RzXHJcblx0XHRcdFx0PC9MaXN0U3ViaGVhZGVyPlxyXG5cdFx0XHRcdHtyZW5kZXJlZEl0ZW1zfVxyXG5cdFx0XHQ8L0xpc3Q+XHJcblx0XHQ8L1BhZGRlZFBhcGVyPlxyXG5cdCk7XHJcbn07XHJcbnR5cGUgRmFjaWxpdHlJbmZvUHJvcHMgPSB7XHJcblx0ZmFjaWxpdHk6IEZhY2lsaXR5O1xyXG59O1xyXG5jb25zdCBGYWNpbGl0eUluZm86IEZDPEZhY2lsaXR5SW5mb1Byb3BzPiA9IChcclxuXHRwcm9wcyxcclxuKSA9PiB7XHJcblx0Y29uc3QgeyBmYWNpbGl0eSB9ID0gcHJvcHM7XHJcblx0Y29uc3QgeyBjdXJyZW50OiBpdGVtcyB9ID0gdXNlUmVmKFtcclxuXHRcdHtcclxuXHRcdFx0aWNvbjogPEFiY1JvdW5kZWQgY29sb3I9XCJzZWNvbmRhcnlcIiAvPixcclxuXHRcdFx0cmVuZGVyOiAoZmFjaWxpdHk6IEZhY2lsaXR5KSA9PlxyXG5cdFx0XHRcdGZhY2lsaXR5LmxhYmVsLFxyXG5cdFx0XHRsYWJlbDogXCJOYW1lXCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpY29uOiA8Q2F0ZWdvcnlSb3VuZGVkIGNvbG9yPVwic2Vjb25kYXJ5XCIgLz4sXHJcblx0XHRcdHJlbmRlcjogKGZhY2lsaXR5OiBGYWNpbGl0eSkgPT5cclxuXHRcdFx0XHRmYWNpbGl0eS5yZWNpcGVUeXBlLFxyXG5cdFx0XHRsYWJlbDogXCJDYXRlZ29yeVwiLFxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0aWNvbjogPFNwZWVkUm91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+LFxyXG5cdFx0XHRyZW5kZXI6IChmYWNpbGl0eTogRmFjaWxpdHkpID0+XHJcblx0XHRcdFx0YCR7Zm9ybWF0TnVtYmVyKFxyXG5cdFx0XHRcdFx0ZmFjaWxpdHkuY3ljbGVNdWx0aXBsaWVyICogMTAwLFxyXG5cdFx0XHRcdCl9JWAsXHJcblx0XHRcdGxhYmVsOiBcIkN5Y2xlIHNwZWVkXCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpY29uOiA8VXNiUm91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+LFxyXG5cdFx0XHRyZW5kZXI6IChmYWNpbGl0eTogRmFjaWxpdHkpID0+XHJcblx0XHRcdFx0ZmFjaWxpdHkuY29ubmVjdGlvbkNvdW50LFxyXG5cdFx0XHRsYWJlbDogXCJTb3J0ZXIgY29ubmVjdGlvbnNcIixcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdGljb246IDxCb2x0Um91bmRlZCBjb2xvcj1cInNlY29uZGFyeVwiIC8+LFxyXG5cdFx0XHRyZW5kZXI6IChmYWNpbGl0eTogRmFjaWxpdHkpID0+XHJcblx0XHRcdFx0YCR7Zm9ybWF0TnVtYmVyKFxyXG5cdFx0XHRcdFx0ZmFjaWxpdHkud29ya0NvbnN1bXB0aW9uTVcsXHJcblx0XHRcdFx0KX0gTVdgLFxyXG5cdFx0XHRsYWJlbDogXCJXb3JrIGNvbXN1bXB0aW9uXCIsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRpY29uOiA8Qm9sdFJvdW5kZWQgY29sb3I9XCJzZWNvbmRhcnlcIiAvPixcclxuXHRcdFx0cmVuZGVyOiAoZmFjaWxpdHk6IEZhY2lsaXR5KSA9PlxyXG5cdFx0XHRcdGAke2Zvcm1hdE51bWJlcihcclxuXHRcdFx0XHRcdGZhY2lsaXR5LmlkbGVDb25zdW1wdGlvbk1XLFxyXG5cdFx0XHRcdCl9IE1XYCxcclxuXHRcdFx0bGFiZWw6IFwiSWRsZSBjb21zdW1wdGlvblwiLFxyXG5cdFx0fSxcclxuXHRdKTtcclxuXHJcblx0Y29uc3QgcmVuZGVyZWRJdGVtcyA9IGl0ZW1zLm1hcChcclxuXHRcdCh7IGljb24sIGxhYmVsLCByZW5kZXIgfSkgPT4gKFxyXG5cdFx0XHQ8TGlzdEl0ZW1cclxuXHRcdFx0XHRrZXk9e2xhYmVsfVxyXG5cdFx0XHRcdGRpc2FibGVHdXR0ZXJzXHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8TGlzdEl0ZW1JY29uPntpY29ufTwvTGlzdEl0ZW1JY29uPlxyXG5cdFx0XHRcdDxMaXN0SXRlbVRleHRcclxuXHRcdFx0XHRcdHByaW1hcnk9e2xhYmVsfVxyXG5cdFx0XHRcdFx0c2Vjb25kYXJ5PXtyZW5kZXIoZmFjaWxpdHkpfVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvTGlzdEl0ZW0+XHJcblx0XHQpLFxyXG5cdCk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8UGFkZGVkUGFwZXJcclxuXHRcdFx0c3F1YXJlXHJcblx0XHRcdGVsZXZhdGlvbj17Mn1cclxuXHRcdD5cclxuXHRcdFx0PExpc3RcclxuXHRcdFx0XHRkZW5zZVxyXG5cdFx0XHRcdGRpc2FibGVQYWRkaW5nXHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8TGlzdFN1YmhlYWRlclxyXG5cdFx0XHRcdFx0ZGlzYWJsZUd1dHRlcnNcclxuXHRcdFx0XHRcdGRpc2FibGVTdGlja3lcclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHRGYWNpbGl0eSBpbmZvcm1hdGlvblxyXG5cdFx0XHRcdDwvTGlzdFN1YmhlYWRlcj5cclxuXHRcdFx0XHR7cmVuZGVyZWRJdGVtc31cclxuXHRcdFx0PC9MaXN0PlxyXG5cdFx0PC9QYWRkZWRQYXBlcj5cclxuXHQpO1xyXG59O1xyXG5cclxudHlwZSBJbmZvR3JvdXBQcm9wcyA9IHtcclxuXHRwbGFjZW1lbnQ6IFBsYWNlbWVudERhdGE7XHJcblx0ZGF0YTogRWRpdG9yRm9ybURhdGE7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBJbmZvR3JvdXA6IEZDPEluZm9Hcm91cFByb3BzPiA9IChcclxuXHRwcm9wcyxcclxuKSA9PiB7XHJcblx0Y29uc3QgeyBkYXRhLCBwbGFjZW1lbnQgfSA9IHByb3BzO1xyXG5cdHJldHVybiAoXHJcblx0XHQ8Qm94PlxyXG5cdFx0XHQ8R3JpZFxyXG5cdFx0XHRcdGNvbnRhaW5lclxyXG5cdFx0XHRcdHNwYWNpbmc9ezJ9XHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8R3JpZFxyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0eHM9ezEyfVxyXG5cdFx0XHRcdFx0bWQ9ezZ9XHJcblx0XHRcdFx0XHRkaXNwbGF5PVwiZmxleFwiXHJcblx0XHRcdFx0XHRmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCJcclxuXHRcdFx0XHRcdGdhcD17Mn1cclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHQ8UGxhY2VtZW50SW5mbyBwbGFjZW1lbnQ9e3BsYWNlbWVudH0gLz5cclxuXHRcdFx0XHRcdDxSZWNpcGVJbmZvIHJlY2lwZT17ZGF0YS5yZWNpcGV9IC8+XHJcblx0XHRcdFx0PC9HcmlkPlxyXG5cdFx0XHRcdDxHcmlkXHJcblx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHR4cz17MTJ9XHJcblx0XHRcdFx0XHRtZD17Nn1cclxuXHRcdFx0XHRcdGRpc3BsYXk9XCJmbGV4XCJcclxuXHRcdFx0XHRcdGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxyXG5cdFx0XHRcdFx0Z2FwPXsyfVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdDxGYWNpbGl0eUluZm9cclxuXHRcdFx0XHRcdFx0ZmFjaWxpdHk9e2RhdGEuZmFjaWxpdHl9XHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0PFByb2xpZmVyYXRvckluZm9cclxuXHRcdFx0XHRcdFx0cHJvbGlmZXJhdG9yPXtkYXRhLnByb2xpZmVyYXRvcn1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0PC9HcmlkPlxyXG5cdFx0XHQ8L0dyaWQ+XHJcblx0XHQ8L0JveD5cclxuXHQpO1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG5cdFRhYmxlLFxyXG5cdFRhYmxlQm9keSxcclxuXHRUYWJsZUNlbGwsXHJcblx0VGFibGVDb250YWluZXIsXHJcblx0VGFibGVIZWFkLFxyXG5cdFRhYmxlUm93LFxyXG59IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhZGRlZFBhcGVyIH0gZnJvbSBcIn5jb21wb25lbnRzL1BhZGRlZFBhcGVyXCI7XHJcbmltcG9ydCB7IFN0eWxlZFRhYmxlSGVhZENlbGwgfSBmcm9tIFwifmNvbXBvbmVudHMvU3R5bGVkVGFibGVIZWFkQ2VsbFwiO1xyXG5pbXBvcnQgeyBmb3JtYXROdW1iZXIgfSBmcm9tIFwifmNvcmUvZm9ybWF0dGluZ1wiO1xyXG5pbXBvcnQge1xyXG5cdFBsYWNlbWVudERhdGEsXHJcblx0UG93ZXJVc2FnZURhdGEsXHJcbn0gZnJvbSBcIn50eXBlcy9xdWVyeVwiO1xyXG5cclxuY29uc3QgU3R5bGVkVGFibGVIZWFkOiBGQyA9ICgpID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PFRhYmxlUm93PlxyXG5cdFx0XHQ8U3R5bGVkVGFibGVIZWFkQ2VsbFxyXG5cdFx0XHRcdGNvbFNwYW49ezN9XHJcblx0XHRcdFx0Y2hpbGRyZW49XCJQb3dlciBjb25zdW1wdGlvbiAoTVcpXCJcclxuXHRcdFx0Lz5cclxuXHRcdFx0PFN0eWxlZFRhYmxlSGVhZENlbGxcclxuXHRcdFx0XHRjb2xTcGFuPXsxfVxyXG5cdFx0XHRcdGFsaWduPVwicmlnaHRcIlxyXG5cdFx0XHRcdGNoaWxkcmVuPVwiVG90YWxcIlxyXG5cdFx0XHQvPlxyXG5cdFx0XHQ8U3R5bGVkVGFibGVIZWFkQ2VsbFxyXG5cdFx0XHRcdGNvbFNwYW49ezF9XHJcblx0XHRcdFx0YWxpZ249XCJyaWdodFwiXHJcblx0XHRcdFx0Y2hpbGRyZW49XCJQZXIgYXJyYXlcIlxyXG5cdFx0XHQvPlxyXG5cdFx0XHQ8U3R5bGVkVGFibGVIZWFkQ2VsbFxyXG5cdFx0XHRcdGNvbFNwYW49ezF9XHJcblx0XHRcdFx0YWxpZ249XCJyaWdodFwiXHJcblx0XHRcdFx0Y2hpbGRyZW49XCJQZXIgZmFjaWxpdHlcIlxyXG5cdFx0XHQvPlxyXG5cdFx0PC9UYWJsZVJvdz5cclxuXHQpO1xyXG59O1xyXG5cclxudHlwZSBQb3dlclVzYWdlVGFibGVQcm9wcyA9IHtcclxuXHRkYXRhOiBQb3dlclVzYWdlRGF0YTtcclxuXHRwbGFjZW1lbnQ6IFBsYWNlbWVudERhdGE7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBQb3dlclVzYWdlVGFibGU6IEZDPFxyXG5cdFBvd2VyVXNhZ2VUYWJsZVByb3BzXHJcbj4gPSAocHJvcHMpID0+IHtcclxuXHRjb25zdCB7XHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdHdvcmtVc2FnZU1XUGVyRmFjaWxpdHksXHJcblx0XHRcdGlkbGVVc2FnZU1XUGVyRmFjaWxpdHksXHJcblx0XHR9LFxyXG5cdFx0cGxhY2VtZW50OiB7XHJcblx0XHRcdGZhY2lsaXRpZXNOZWVkZWQsXHJcblx0XHRcdGZhY2lsaXRpZXNQZXJBcnJheSxcclxuXHRcdH0sXHJcblx0fSA9IHByb3BzO1xyXG5cclxuXHRjb25zdCB3b3JrVXNhZ2VJdGVtcyA9IFtcclxuXHRcdC13b3JrVXNhZ2VNV1BlckZhY2lsaXR5ICogZmFjaWxpdGllc05lZWRlZCxcclxuXHRcdC13b3JrVXNhZ2VNV1BlckZhY2lsaXR5ICogZmFjaWxpdGllc1BlckFycmF5LFxyXG5cdFx0LXdvcmtVc2FnZU1XUGVyRmFjaWxpdHksXHJcblx0XS5tYXAoKHZhbHVlLCBpbmRleCkgPT4gKFxyXG5cdFx0PFRhYmxlQ2VsbFxyXG5cdFx0XHRrZXk9e2BzdXBwbHktJHtpbmRleH1gfVxyXG5cdFx0XHRjb2xTcGFuPXsxfVxyXG5cdFx0XHRhbGlnbj1cInJpZ2h0XCJcclxuXHRcdFx0Y2hpbGRyZW49e2Zvcm1hdE51bWJlcih2YWx1ZSl9XHJcblx0XHQvPlxyXG5cdCkpO1xyXG5cclxuXHRjb25zdCBpZGxlVXNhZ2VJdGVtcyA9IFtcclxuXHRcdC1pZGxlVXNhZ2VNV1BlckZhY2lsaXR5ICogZmFjaWxpdGllc05lZWRlZCxcclxuXHRcdC1pZGxlVXNhZ2VNV1BlckZhY2lsaXR5ICogZmFjaWxpdGllc1BlckFycmF5LFxyXG5cdFx0LWlkbGVVc2FnZU1XUGVyRmFjaWxpdHksXHJcblx0XS5tYXAoKHZhbHVlLCBpbmRleCkgPT4gKFxyXG5cdFx0PFRhYmxlQ2VsbFxyXG5cdFx0XHRrZXk9e2Bwb3dlci0ke2luZGV4fWB9XHJcblx0XHRcdGNvbFNwYW49ezF9XHJcblx0XHRcdGFsaWduPVwicmlnaHRcIlxyXG5cdFx0XHRjaGlsZHJlbj17Zm9ybWF0TnVtYmVyKHZhbHVlKX1cclxuXHRcdC8+XHJcblx0KSk7XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8UGFkZGVkUGFwZXJcclxuXHRcdFx0c3F1YXJlXHJcblx0XHRcdGVsZXZhdGlvbj17Mn1cclxuXHRcdD5cclxuXHRcdFx0PFRhYmxlQ29udGFpbmVyPlxyXG5cdFx0XHRcdDxUYWJsZT5cclxuXHRcdFx0XHRcdDxUYWJsZUhlYWQ+XHJcblx0XHRcdFx0XHRcdDxTdHlsZWRUYWJsZUhlYWQgLz5cclxuXHRcdFx0XHRcdDwvVGFibGVIZWFkPlxyXG5cdFx0XHRcdFx0PFRhYmxlQm9keT5cclxuXHRcdFx0XHRcdFx0PFRhYmxlUm93PlxyXG5cdFx0XHRcdFx0XHRcdDxUYWJsZUNlbGxcclxuXHRcdFx0XHRcdFx0XHRcdGNvbFNwYW49ezN9XHJcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbj1cIldvcmtcIlxyXG5cdFx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHRcdFx0e3dvcmtVc2FnZUl0ZW1zfVxyXG5cdFx0XHRcdFx0XHQ8L1RhYmxlUm93PlxyXG5cdFx0XHRcdFx0XHQ8VGFibGVSb3c+XHJcblx0XHRcdFx0XHRcdFx0PFRhYmxlQ2VsbFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29sU3Bhbj17M31cclxuXHRcdFx0XHRcdFx0XHRcdGNoaWxkcmVuPVwiSWRsZVwiXHJcblx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHR7aWRsZVVzYWdlSXRlbXN9XHJcblx0XHRcdFx0XHRcdDwvVGFibGVSb3c+XHJcblx0XHRcdFx0XHQ8L1RhYmxlQm9keT5cclxuXHRcdFx0XHQ8L1RhYmxlPlxyXG5cdFx0XHQ8L1RhYmxlQ29udGFpbmVyPlxyXG5cdFx0PC9QYWRkZWRQYXBlcj5cclxuXHQpO1xyXG59O1xyXG4iLCJleHBvcnQgY29uc3Qgc2FmZVBhcnNlQ2xhbXAgPSAoXHJcblx0dmFsdWU6IHN0cmluZyxcclxuXHRtaW5WYWx1ZTogbnVtYmVyLFxyXG5cdG1heFZhbHVlOiBudW1iZXIsXHJcbik6IG51bWJlciA9PiB7XHJcblx0Y29uc3QgcCA9IE51bWJlci5wYXJzZUludCh2YWx1ZSk7XHJcblx0aWYgKE51bWJlci5pc05hTihwKSkge1xyXG5cdFx0cmV0dXJuIG1pblZhbHVlO1xyXG5cdH1cclxuXHRpZiAocCA+IG1heFZhbHVlKSB7XHJcblx0XHRyZXR1cm4gbWF4VmFsdWU7XHJcblx0fVxyXG5cdGlmIChwIDwgbWluVmFsdWUpIHtcclxuXHRcdHJldHVybiBtaW5WYWx1ZTtcclxuXHR9XHJcblx0cmV0dXJuIHA7XHJcbn07XHJcbiIsImltcG9ydCB7IHNhZmVQYXJzZUNsYW1wIH0gZnJvbSBcIn5jb3JlL3BhcnNpbmdcIjtcclxuaW1wb3J0IHtcclxuXHRDb25maWdGb3JtRGF0YSxcclxuXHRFZGl0b3JGb3JtRGF0YSxcclxuXHRGbG93RGF0YSxcclxufSBmcm9tIFwifnR5cGVzL3F1ZXJ5XCI7XHJcblxyXG5jb25zdCBjb21wdXRlRGVtYW5kUGVyTWludXRlUGVyRmFjaWxpdHkgPSAoXHJcblx0Y29uZmlnRm9ybURhdGE6IENvbmZpZ0Zvcm1EYXRhLFxyXG4pOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0+IHtcclxuXHRjb25zdCB7XHJcblx0XHRmYWNpbGl0eTogZixcclxuXHRcdHJlY2lwZTogcixcclxuXHRcdHByb2xpZmVyYXRvcjogcCxcclxuXHRcdHByb2xpZmVyYXRvclNwcmF5Q291bnQ6IHBTQyxcclxuXHR9ID0gY29uZmlnRm9ybURhdGE7XHJcblxyXG5cdGNvbnN0IHsgY3ljbGVUaW1lU2Vjb25kLCBtYXRlcmlhbFJlY29yZCB9ID0gcjtcclxuXHJcblx0Y29uc3QgY3ljbGVzID1cclxuXHRcdCg2MCAvIGN5Y2xlVGltZVNlY29uZCkgKlxyXG5cdFx0Zi5jeWNsZU11bHRpcGxpZXIgKlxyXG5cdFx0cC5jeWNsZU11bHRpcGxpZXI7XHJcblxyXG5cdGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG5cdGZvciAoY29uc3QgayBpbiBtYXRlcmlhbFJlY29yZCkge1xyXG5cdFx0cmVzdWx0W2tdID0gbWF0ZXJpYWxSZWNvcmRba10gKiBjeWNsZXM7XHJcblx0fVxyXG5cclxuXHRjb25zdCBzcHJheUNvdW50ID0gc2FmZVBhcnNlQ2xhbXAoXHJcblx0XHRwU0MsXHJcblx0XHQwLFxyXG5cdFx0TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXHJcblx0KTtcclxuXHRpZiAoc3ByYXlDb3VudCA+IDApIHtcclxuXHRcdGxldCBwcm9saWZNYXRlcmlhbENvc3QgPSAwO1xyXG5cdFx0Zm9yIChjb25zdCByYXRpbyBvZiBPYmplY3QudmFsdWVzKFxyXG5cdFx0XHRyLm1hdGVyaWFsUmVjb3JkLFxyXG5cdFx0KSkge1xyXG5cdFx0XHRwcm9saWZNYXRlcmlhbENvc3QgKz0gY3ljbGVzICogcmF0aW87XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHByb2xpZlByb2R1Y3RDb3N0ID0gMDtcclxuXHRcdGZvciAoY29uc3QgcmF0aW8gb2YgT2JqZWN0LnZhbHVlcyhcclxuXHRcdFx0ci5wcm9kdWN0UmVjb3JkLFxyXG5cdFx0KSkge1xyXG5cdFx0XHRwcm9saWZQcm9kdWN0Q29zdCArPVxyXG5cdFx0XHRcdGN5Y2xlcyAqIHJhdGlvICogcC5wcm9kdWN0TXVsdGlwbGllcjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXN1bHRbYCR7cC5sYWJlbH0gKG1hdGVyaWFscylgXSA9XHJcblx0XHRcdHByb2xpZk1hdGVyaWFsQ29zdCAvIHNwcmF5Q291bnQ7XHJcblx0XHRyZXN1bHRbYCR7cC5sYWJlbH0gKHByb2R1Y3RzKWBdID1cclxuXHRcdFx0cHJvbGlmUHJvZHVjdENvc3QgLyBzcHJheUNvdW50O1xyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuY29uc3QgY29tcHV0ZVByb2R1Y3Rpb25QZXJNaW51dGVQZXJGYWNpbGl0eSA9IChcclxuXHRjb25maWdGb3JtRGF0YTogQ29uZmlnRm9ybURhdGEsXHJcbik6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPT4ge1xyXG5cdGNvbnN0IHtcclxuXHRcdGZhY2lsaXR5OiBmLFxyXG5cdFx0cmVjaXBlOiByLFxyXG5cdFx0cHJvbGlmZXJhdG9yOiBwLFxyXG5cdH0gPSBjb25maWdGb3JtRGF0YTtcclxuXHRjb25zdCB7IGN5Y2xlVGltZVNlY29uZCwgcHJvZHVjdFJlY29yZCB9ID0gcjtcclxuXHJcblx0Y29uc3QgY3ljbGVzUGVyTWludXRlID1cclxuXHRcdCg2MCAvIGN5Y2xlVGltZVNlY29uZCkgKlxyXG5cdFx0Zi5jeWNsZU11bHRpcGxpZXIgKlxyXG5cdFx0cC5jeWNsZU11bHRpcGxpZXI7XHJcblxyXG5cdGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG5cdGZvciAoY29uc3QgayBpbiBwcm9kdWN0UmVjb3JkKSB7XHJcblx0XHRyZXN1bHRba10gPVxyXG5cdFx0XHRwcm9kdWN0UmVjb3JkW2tdICpcclxuXHRcdFx0Y3ljbGVzUGVyTWludXRlICpcclxuXHRcdFx0cC5wcm9kdWN0TXVsdGlwbGllcjtcclxuXHR9XHJcblx0cmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21wdXRlRmxvdyA9IChcclxuXHRmb3JtRGF0YTogRWRpdG9yRm9ybURhdGEsXHJcbik6IEZsb3dEYXRhID0+IHtcclxuXHRjb25zdCBtYXRlcmlhbEZsb3dQZXJNaW51dGVQZXJGYWNpbGl0eSA9XHJcblx0XHRjb21wdXRlRGVtYW5kUGVyTWludXRlUGVyRmFjaWxpdHkoZm9ybURhdGEpO1xyXG5cclxuXHRjb25zdCBwcm9kdWN0Rmxvd1Blck1pbnV0ZVBlckZhY2lsaXR5ID1cclxuXHRcdGNvbXB1dGVQcm9kdWN0aW9uUGVyTWludXRlUGVyRmFjaWxpdHkoXHJcblx0XHRcdGZvcm1EYXRhLFxyXG5cdFx0KTtcclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdG1hdGVyaWFsRmxvd1Blck1pbnV0ZVBlckZhY2lsaXR5LFxyXG5cdFx0cHJvZHVjdEZsb3dQZXJNaW51dGVQZXJGYWNpbGl0eSxcclxuXHR9O1xyXG59O1xyXG4iLCJpbXBvcnQgeyBzYWZlUGFyc2VDbGFtcCB9IGZyb20gXCJ+Y29yZS9wYXJzaW5nXCI7XHJcbmltcG9ydCB7XHJcblx0Q29uZmlnRm9ybURhdGEsXHJcblx0RWRpdG9yRm9ybURhdGEsXHJcblx0UGxhY2VtZW50RGF0YSxcclxufSBmcm9tIFwifnR5cGVzL3F1ZXJ5XCI7XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZUZhY2lsaXRpZXNOZWVkZWRDYXBhY2l0eSA9IChcclxuXHRjb25maWc6IENvbmZpZ0Zvcm1EYXRhLFxyXG5cdGNhcGFjaXR5OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG4pID0+IHtcclxuXHRjb25zdCB7IGZhY2lsaXR5LCBwcm9saWZlcmF0b3IsIHJlY2lwZSB9ID1cclxuXHRcdGNvbmZpZztcclxuXHRjb25zdCBwYXJzZWQ6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuXHRmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhjYXBhY2l0eSkpIHtcclxuXHRcdHBhcnNlZFtrXSA9IHNhZmVQYXJzZUNsYW1wKFxyXG5cdFx0XHR2LFxyXG5cdFx0XHQwLFxyXG5cdFx0XHROdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRpZiAoXHJcblx0XHRPYmplY3QudmFsdWVzKHBhcnNlZCkuZXZlcnkoXHJcblx0XHRcdCh2YWx1ZSkgPT4gdmFsdWUgPT09IDAsXHJcblx0XHQpXHJcblx0KSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9XHJcblxyXG5cdGNvbnN0IGN5Y2xlc1Blck1pbnV0ZSA9XHJcblx0XHQoNjAgLyByZWNpcGUuY3ljbGVUaW1lU2Vjb25kKSAqXHJcblx0XHRmYWNpbGl0eS5jeWNsZU11bHRpcGxpZXIgKlxyXG5cdFx0cHJvbGlmZXJhdG9yLmN5Y2xlTXVsdGlwbGllcjtcclxuXHJcblx0bGV0IHJlc3VsdCA9IDA7XHJcblx0Zm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoXHJcblx0XHRyZWNpcGUucHJvZHVjdFJlY29yZCxcclxuXHQpKSB7XHJcblx0XHRjb25zdCBpdGVtRmxvd3JhdGUgPVxyXG5cdFx0XHR2ICpcclxuXHRcdFx0Y3ljbGVzUGVyTWludXRlICpcclxuXHRcdFx0cHJvbGlmZXJhdG9yLnByb2R1Y3RNdWx0aXBsaWVyO1xyXG5cdFx0Y29uc3QgY3Vyck5lZWRlZCA9IHBhcnNlZFtrXSAvIGl0ZW1GbG93cmF0ZTtcclxuXHRcdGlmIChjdXJyTmVlZGVkID4gcmVzdWx0KSB7XHJcblx0XHRcdHJlc3VsdCA9IGN1cnJOZWVkZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuLy8gQ29tcHV0ZXMgdGhlIG51bWJlciBvZiBmYWNpbGl0eSB3aGljaCBjb25zdW1lcyB0aGUgbG93ZXN0IG1hdGVyaWFsIHRyYW5zcG9ydCBjYXBhY2l0eVxyXG4vLyBFLmcuIEZvciBjaXJjdWl0IGJvYXJkICgxeCBjb3BwZXIgaW5nb3QsIDJ4IGlyb24gaW5nb3QpXHJcbi8vIElmIHRoZSBjb25zdHJhaW50IGlzIGdpdmVuIGFzXHJcbi8vIC0gMjAweCBjb3BwZXIgaW5nb3QgcGVyIG1pbnV0ZVxyXG4vLyAtIDMwMHggaXJvbiBpbmdvdCBwZXIgbWludXRlXHJcbi8vIHRoZW4gdGhlIGNhbGN1bGF0ZWQgbnVtYmVyIG9mIGFyYyBzbWVsdGVyIGlzIDMgKDQ1eCBjb3BwZXIgaW5nb3QgcGVyIG1pbnV0ZSBwZXIgZmFjaWxpdHksIDkwIGlyb24gaW5nb3QgcGVyIG1pbnV0ZSBwZXIgZmFjaWxpdHkpXHJcbi8vIFRoaXMgd2F5LCB0aGUgY2FsY3VsYXRvciBkb2VzIG5vdCB0YXAgaW50byByZXNvdXJjZSB3aGljaCBkb2VzIG5vdCBleGlzdFxyXG4vLyBvciBleGNlZWQgdGhlIGNvbnN0cmFpbnQuXHJcbmV4cG9ydCBjb25zdCBjb21wdXRlRmFjaWxpdGllc05lZWRlZENvbnN0cmFpbnQgPSAoXHJcblx0Y29uZmlnOiBDb25maWdGb3JtRGF0YSxcclxuXHRjb25zdHJhaW50OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG4pID0+IHtcclxuXHRjb25zdCB7IGZhY2lsaXR5LCByZWNpcGUsIHByb2xpZmVyYXRvciB9ID1cclxuXHRcdGNvbmZpZztcclxuXHJcblx0Y29uc3QgcGFyc2VkOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XHJcblx0Zm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoXHJcblx0XHRjb25zdHJhaW50LFxyXG5cdCkpIHtcclxuXHRcdHBhcnNlZFtrXSA9IHNhZmVQYXJzZUNsYW1wKFxyXG5cdFx0XHR2LFxyXG5cdFx0XHQwLFxyXG5cdFx0XHROdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRpZiAoXHJcblx0XHRPYmplY3QudmFsdWVzKHBhcnNlZCkuZXZlcnkoXHJcblx0XHRcdCh2YWx1ZSkgPT4gdmFsdWUgPT09IDAsXHJcblx0XHQpXHJcblx0KSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9XHJcblxyXG5cdGNvbnN0IGN5Y2xlc1Blck1pbnV0ZSA9XHJcblx0XHQoNjAgLyByZWNpcGUuY3ljbGVUaW1lU2Vjb25kKSAqXHJcblx0XHRmYWNpbGl0eS5jeWNsZU11bHRpcGxpZXIgKlxyXG5cdFx0cHJvbGlmZXJhdG9yLmN5Y2xlTXVsdGlwbGllcjtcclxuXHJcblx0bGV0IHJlc3VsdCA9IDA7XHJcblx0Zm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoXHJcblx0XHRyZWNpcGUubWF0ZXJpYWxSZWNvcmQsXHJcblx0KSkge1xyXG5cdFx0Y29uc3QgaXRlbUZsb3dyYXRlID0gdiAqIGN5Y2xlc1Blck1pbnV0ZTtcclxuXHRcdGNvbnN0IGN1cnJOZWVkZWQgPSBwYXJzZWRba10gLyBpdGVtRmxvd3JhdGU7XHJcblx0XHRpZiAoXHJcblx0XHRcdChjdXJyTmVlZGVkID4gMCAmJiByZXN1bHQgPT09IDApIHx8XHJcblx0XHRcdGN1cnJOZWVkZWQgPCByZXN1bHRcclxuXHRcdCkge1xyXG5cdFx0XHRyZXN1bHQgPSBjdXJyTmVlZGVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXB1dGVGYWNpbGl0aWVzUGVyQXJyYXkgPSAoXHJcblx0Y29uZmlnOiBDb25maWdGb3JtRGF0YSxcclxuKSA9PiB7XHJcblx0Y29uc3Qge1xyXG5cdFx0Zmxvd3JhdGUsXHJcblx0XHRmYWNpbGl0eSxcclxuXHRcdHJlY2lwZSxcclxuXHRcdHByb2xpZmVyYXRvcixcclxuXHR9ID0gY29uZmlnO1xyXG5cclxuXHRjb25zdCBwYXJzZWQ6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuXHRmb3IgKGNvbnN0IGsgaW4gZmxvd3JhdGUpIHtcclxuXHRcdHBhcnNlZFtrXSA9IHNhZmVQYXJzZUNsYW1wKFxyXG5cdFx0XHRmbG93cmF0ZVtrXSxcclxuXHRcdFx0MCxcclxuXHRcdFx0TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0Y29uc3QgY3ljbGVzUGVyTWludXRlID1cclxuXHRcdCg2MCAvIHJlY2lwZS5jeWNsZVRpbWVTZWNvbmQpICpcclxuXHRcdGZhY2lsaXR5LmN5Y2xlTXVsdGlwbGllciAqXHJcblx0XHRwcm9saWZlcmF0b3IuY3ljbGVNdWx0aXBsaWVyO1xyXG5cclxuXHRsZXQgbWF0Qm90dGxlTmVjayA9IDA7XHJcblx0Zm9yIChjb25zdCBrIGluIHJlY2lwZS5tYXRlcmlhbFJlY29yZCkge1xyXG5cdFx0Y29uc3QgaXRlbUZsb3dyYXRlID0gcGFyc2VkW2tdO1xyXG5cdFx0Y29uc3QgY3VyckJvdHRsZU5lY2sgPVxyXG5cdFx0XHRpdGVtRmxvd3JhdGUgL1xyXG5cdFx0XHQocGFyc2VkW2tdICogY3ljbGVzUGVyTWludXRlKTtcclxuXHRcdGlmIChcclxuXHRcdFx0KG1hdEJvdHRsZU5lY2sgPT09IDAgJiZcclxuXHRcdFx0XHRjdXJyQm90dGxlTmVjayA+IDApIHx8XHJcblx0XHRcdGN1cnJCb3R0bGVOZWNrIDwgbWF0Qm90dGxlTmVja1xyXG5cdFx0KSB7XHJcblx0XHRcdG1hdEJvdHRsZU5lY2sgPSBjdXJyQm90dGxlTmVjaztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxldCBwcm9kQm90dGxlTmVjayA9IDA7XHJcblx0Zm9yIChjb25zdCBrIGluIHJlY2lwZS5wcm9kdWN0UmVjb3JkKSB7XHJcblx0XHRjb25zdCBpdGVtRmxvd3JhdGUgPSBwYXJzZWRba107XHJcblx0XHRjb25zdCBjdXJyQm90dGxlTmVjayA9XHJcblx0XHRcdGl0ZW1GbG93cmF0ZSAvXHJcblx0XHRcdChwYXJzZWRba10gKlxyXG5cdFx0XHRcdGN5Y2xlc1Blck1pbnV0ZSAqXHJcblx0XHRcdFx0cHJvbGlmZXJhdG9yLnByb2R1Y3RNdWx0aXBsaWVyKTtcclxuXHRcdGlmIChcclxuXHRcdFx0KHByb2RCb3R0bGVOZWNrID09PSAwICYmXHJcblx0XHRcdFx0Y3VyckJvdHRsZU5lY2sgPiAwKSB8fFxyXG5cdFx0XHRjdXJyQm90dGxlTmVjayA8IHByb2RCb3R0bGVOZWNrXHJcblx0XHQpIHtcclxuXHRcdFx0cHJvZEJvdHRsZU5lY2sgPSBjdXJyQm90dGxlTmVjaztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBNYXRoLm1pbihtYXRCb3R0bGVOZWNrLCBwcm9kQm90dGxlTmVjayk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZVBsYWNlbWVudCA9IChcclxuXHRkYXRhOiBFZGl0b3JGb3JtRGF0YSxcclxuKTogUGxhY2VtZW50RGF0YSA9PiB7XHJcblx0bGV0IGZhY2lsaXRpZXNOZWVkZWQgPSAwO1xyXG5cdGlmIChkYXRhLmNvbXB1dGVNb2RlID09PSBcImNvbnN0cmFpbnRcIikge1xyXG5cdFx0ZmFjaWxpdGllc05lZWRlZCA9XHJcblx0XHRcdGNvbXB1dGVGYWNpbGl0aWVzTmVlZGVkQ29uc3RyYWludChcclxuXHRcdFx0XHRkYXRhLFxyXG5cdFx0XHRcdGRhdGEuY29uc3RyYWludCxcclxuXHRcdFx0KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0ZmFjaWxpdGllc05lZWRlZCA9XHJcblx0XHRcdGNvbXB1dGVGYWNpbGl0aWVzTmVlZGVkQ2FwYWNpdHkoXHJcblx0XHRcdFx0ZGF0YSxcclxuXHRcdFx0XHRkYXRhLmNhcGFjaXR5LFxyXG5cdFx0XHQpO1xyXG5cdH1cclxuXHRjb25zdCBmYWNpbGl0aWVzUGVyQXJyYXkgPVxyXG5cdFx0Y29tcHV0ZUZhY2lsaXRpZXNQZXJBcnJheShkYXRhKTtcclxuXHJcblx0bGV0IGFycmF5c05lZWRlZCA9IDA7XHJcblx0bGV0IGxlZnRvdmVyRmFjaWxpdGllcyA9IDA7XHJcblx0aWYgKGZhY2lsaXRpZXNQZXJBcnJheSA+IDApIHtcclxuXHRcdGFycmF5c05lZWRlZCA9IE1hdGguZmxvb3IoXHJcblx0XHRcdGZhY2lsaXRpZXNOZWVkZWQgLyBmYWNpbGl0aWVzUGVyQXJyYXksXHJcblx0XHQpO1xyXG5cdFx0ZmFjaWxpdGllc05lZWRlZCA9XHJcblx0XHRcdGZhY2lsaXRpZXNOZWVkZWQgLVxyXG5cdFx0XHRhcnJheXNOZWVkZWQgKiBmYWNpbGl0aWVzUGVyQXJyYXk7XHJcblx0fVxyXG5cdHJldHVybiB7XHJcblx0XHRmYWNpbGl0aWVzTmVlZGVkLFxyXG5cdFx0ZmFjaWxpdGllc1BlckFycmF5LFxyXG5cdFx0YXJyYXlzTmVlZGVkLFxyXG5cdFx0bGVmdG92ZXJGYWNpbGl0aWVzLFxyXG5cdH07XHJcbn07XHJcbiIsImltcG9ydCB7IGdldFNvcnRlciB9IGZyb20gXCJ+YXNzZXRzL2dldFwiO1xyXG5pbXBvcnQgeyBzYWZlUGFyc2VDbGFtcCB9IGZyb20gXCJ+Y29yZS9wYXJzaW5nXCI7XHJcbmltcG9ydCB7XHJcblx0Q29uZmlnRm9ybURhdGEsXHJcblx0RWRpdG9yRm9ybURhdGEsXHJcblx0UG93ZXJVc2FnZURhdGEsXHJcbn0gZnJvbSBcIn50eXBlcy9xdWVyeVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXB1dGVJZGxlVXNhZ2VNV1BlckZhY2lsaXR5ID0gKFxyXG5cdGRhdGE6IENvbmZpZ0Zvcm1EYXRhLFxyXG4pID0+IHtcclxuXHRjb25zdCB7IHNvcnRlciwgZmFjaWxpdHk6IGYgfSA9IGRhdGE7XHJcblx0bGV0IHVzYWdlTVcgPSAwO1xyXG5cdGZvciAoY29uc3QgayBpbiBzb3J0ZXIpIHtcclxuXHRcdGNvbnN0IHMgPSBnZXRTb3J0ZXIoayk7XHJcblx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgcGFyc2VkQ291bnQgPSBzYWZlUGFyc2VDbGFtcChcclxuXHRcdFx0c29ydGVyW2tdLFxyXG5cdFx0XHQwLFxyXG5cdFx0XHROdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcclxuXHRcdCk7XHJcblx0XHR1c2FnZU1XICs9IHBhcnNlZENvdW50ICogcy5pZGxlQ29uc3VtcHRpb25NVztcclxuXHR9XHJcblx0cmV0dXJuIGYuaWRsZUNvbnN1bXB0aW9uTVcgKyB1c2FnZU1XO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXB1dGVXb3JrVXNhZ2VNV1BlckZhY2lsaXR5ID0gKFxyXG5cdGRhdGE6IENvbmZpZ0Zvcm1EYXRhLFxyXG4pID0+IHtcclxuXHRjb25zdCB7XHJcblx0XHRmYWNpbGl0eTogZixcclxuXHRcdHByb2xpZmVyYXRvcjogcCxcclxuXHRcdHNvcnRlcixcclxuXHR9ID0gZGF0YTtcclxuXHRsZXQgdXNhZ2VNVyA9IDA7XHJcblx0Zm9yIChjb25zdCBrIGluIHNvcnRlcikge1xyXG5cdFx0Y29uc3QgcyA9IGdldFNvcnRlcihrKTtcclxuXHRcdGlmIChzID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0Y29udGludWU7XHJcblx0XHR9XHJcblx0XHRjb25zdCBwYXJzZWRDb3VudCA9IHNhZmVQYXJzZUNsYW1wKFxyXG5cdFx0XHRzb3J0ZXJba10sXHJcblx0XHRcdDAsXHJcblx0XHRcdE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxyXG5cdFx0KTtcclxuXHRcdHVzYWdlTVcgKz0gcGFyc2VkQ291bnQgKiBzLndvcmtDb25zdW1wdGlvbk1XO1xyXG5cdH1cclxuXHRjb25zdCBmYWNpbGl0eVdvcmtDb25zdW1wdGlvbk1XID1cclxuXHRcdGYud29ya0NvbnN1bXB0aW9uTVcgKlxyXG5cdFx0cC53b3JrQ29uc3VtcHRpb25NdWx0aXBsaWVyO1xyXG5cclxuXHRyZXR1cm4gZmFjaWxpdHlXb3JrQ29uc3VtcHRpb25NVyArIHVzYWdlTVc7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZVBvd2VyVXNhZ2UgPSAoXHJcblx0ZGF0YTogRWRpdG9yRm9ybURhdGEsXHJcbik6IFBvd2VyVXNhZ2VEYXRhID0+IHtcclxuXHRjb25zdCBpZGxlVXNhZ2VNV1BlckZhY2lsaXR5ID1cclxuXHRcdGNvbXB1dGVJZGxlVXNhZ2VNV1BlckZhY2lsaXR5KGRhdGEpO1xyXG5cdGNvbnN0IHdvcmtVc2FnZU1XUGVyRmFjaWxpdHkgPVxyXG5cdFx0Y29tcHV0ZVdvcmtVc2FnZU1XUGVyRmFjaWxpdHkoZGF0YSk7XHJcblx0cmV0dXJuIHtcclxuXHRcdGlkbGVVc2FnZU1XUGVyRmFjaWxpdHksXHJcblx0XHR3b3JrVXNhZ2VNV1BlckZhY2lsaXR5LFxyXG5cdH07XHJcbn07XHJcbiIsImltcG9ydCB7XHJcblx0Z2V0RmFjaWxpdHksXHJcblx0Z2V0UHJvbGlmZXJhdG9yLFxyXG5cdGdldFJlY2lwZSxcclxuXHRnZXRTb3J0ZXJBbGwsXHJcbn0gZnJvbSBcIn5hc3NldHMvZ2V0XCI7XHJcbmltcG9ydCB7XHJcblx0Q29tcHV0ZUZvcm1EYXRhLFxyXG5cdENvbmZpZ0Zvcm1EYXRhLFxyXG59IGZyb20gXCJ+dHlwZXMvcXVlcnlcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBGQUNJTElUWV9LRVkgPSBcImZhY2lsaXR5XCI7XHJcbmV4cG9ydCBjb25zdCBSRUNJUEVfS0VZID0gXCJyZWNpcGVcIjtcclxuZXhwb3J0IGNvbnN0IFBST0xJRkVSQVRPUl9LRVkgPSBcInByb2xpZmVyYXRvclwiO1xyXG5leHBvcnQgY29uc3QgU09SVEVSX0tFWSA9IFwic29ydGVyXCI7XHJcbmV4cG9ydCBjb25zdCBGTE9XUkFURV9LRVkgPSBcImZsb3dyYXRlXCI7XHJcbmV4cG9ydCBjb25zdCBQUk9MSUZFUkFUT1JfU1BSQVlfQ09VTlRfS0VZID1cclxuXHRcInByb2xpZmVyYXRvclNwcmF5Q291bnRcIjtcclxuZXhwb3J0IGNvbnN0IENPTVBVVEVfTU9ERV9LRVkgPSBcImNvbXB1dGVNb2RlXCI7XHJcbmV4cG9ydCBjb25zdCBDT05TVFJBSU5UX0tFWSA9IFwiY29uc3RyYWludFwiO1xyXG5leHBvcnQgY29uc3QgQ0FQQUNJVFlfS0VZID0gXCJjYXBhY2l0eVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldExvY2FsQ29tcHV0ZUZvcm1EYXRhID0gKCkgPT4ge1xyXG5cdGNvbnN0IGNvbmZpZ0Zvcm1EYXRhID0gZ2V0TG9jYWxDb25maWdGb3JtRGF0YSgpO1xyXG5cdGNvbnN0IGNvbXB1dGVNb2RlID1cclxuXHRcdGdldExvY2FsQ29tcHV0ZU1vZGUoKSA/PyBcIjBcIjtcclxuXHRjb25zdCBjb25zdHJhaW50ID0gZ2V0TG9jYWxSZWNvcmQoXHJcblx0XHRDT05TVFJBSU5UX0tFWSxcclxuXHQpO1xyXG5cdGNvbnN0IGNvbnN0cmFpbnRDb3JyZWN0ZWQgPVxyXG5cdFx0Y29uc3RyYWludCA9PT0gbnVsbCA/IHt9IDogY29uc3RyYWludDtcclxuXHRmb3IgKGNvbnN0IGsgaW4gY29uZmlnRm9ybURhdGEucmVjaXBlXHJcblx0XHQubWF0ZXJpYWxSZWNvcmQpIHtcclxuXHRcdGNvbnN0cmFpbnRDb3JyZWN0ZWRba10gPSBcIlwiO1xyXG5cdFx0aWYgKGNvbnN0cmFpbnQgIT09IG51bGwpIHtcclxuXHRcdFx0Y29uc3RyYWludENvcnJlY3RlZFtrXSA9XHJcblx0XHRcdFx0Y29uc3RyYWludFtrXSA/PyBcIlwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRjb25zdCBjYXBhY2l0eSA9IGdldExvY2FsUmVjb3JkKENBUEFDSVRZX0tFWSk7XHJcblx0Y29uc3QgY2FwYWNpdHlDb3JyZWN0ZWQgPVxyXG5cdFx0Y2FwYWNpdHkgPT09IG51bGwgPyB7fSA6IGNhcGFjaXR5O1xyXG5cdGZvciAoY29uc3QgayBpbiBjb25maWdGb3JtRGF0YS5yZWNpcGVcclxuXHRcdC5wcm9kdWN0UmVjb3JkKSB7XHJcblx0XHRjYXBhY2l0eUNvcnJlY3RlZFtrXSA9IFwiXCI7XHJcblx0XHRpZiAoY2FwYWNpdHkgIT09IG51bGwpIHtcclxuXHRcdFx0Y2FwYWNpdHlDb3JyZWN0ZWRba10gPSBjYXBhY2l0eVtrXSA/PyBcIlwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRjb25zdCBmb3JtRGF0YTogQ29tcHV0ZUZvcm1EYXRhID0ge1xyXG5cdFx0Y29tcHV0ZU1vZGUsXHJcblx0XHRjb25zdHJhaW50OiBjb25zdHJhaW50Q29ycmVjdGVkLFxyXG5cdFx0Y2FwYWNpdHk6IGNhcGFjaXR5Q29ycmVjdGVkLFxyXG5cdH07XHJcblx0cmV0dXJuIGZvcm1EYXRhO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldExvY2FsQ29tcHV0ZU1vZGUgPSAoKSA9PiB7XHJcblx0Y29uc3QgaXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFxyXG5cdFx0Q09NUFVURV9NT0RFX0tFWSxcclxuXHQpO1xyXG5cdGlmIChcclxuXHRcdGl0ZW0gPT09IG51bGwgfHxcclxuXHRcdChpdGVtICE9PSBcIjBcIiAmJiBpdGVtICE9PSBcIjFcIilcclxuXHQpIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHRyZXR1cm4gaXRlbTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMb2NhbENvbmZpZ0Zvcm1EYXRhID0gKCkgPT4ge1xyXG5cdGNvbnN0IGZhY2lsaXR5ID1cclxuXHRcdGdldExvY2FsRmFjaWxpdHkoKSA/P1xyXG5cdFx0Z2V0RmFjaWxpdHkoXCJBcmMgU21lbHRlclwiKSE7XHJcblxyXG5cdGNvbnN0IHJlY2lwZSA9XHJcblx0XHRnZXRMb2NhbFJlY2lwZSgpID8/XHJcblx0XHRnZXRSZWNpcGUoXCJDb3BwZXIgSW5nb3RcIikhO1xyXG5cclxuXHRjb25zdCBwcm9saWZlcmF0b3IgPVxyXG5cdFx0Z2V0TG9jYWxQcm9saWZlcmF0b3IoKSA/P1xyXG5cdFx0Z2V0UHJvbGlmZXJhdG9yKFwiTm9uZVwiKSE7XHJcblxyXG5cdGNvbnN0IHByb2xpZmVyYXRvclNwcmF5Q291bnQgPVxyXG5cdFx0Z2V0TG9jYWxQcm9saWZlcmF0b3JTcHJheUNvdW50KCkgPz9cclxuXHRcdHByb2xpZmVyYXRvci5zcHJheUNvdW50LnRvU3RyaW5nKCk7XHJcblxyXG5cdGNvbnN0IHNvcnRlciA9IGdldExvY2FsUmVjb3JkKFNPUlRFUl9LRVkpO1xyXG5cdGNvbnN0IHNvcnRlckNvcnJlY3RlZDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9XHJcblx0XHRzb3J0ZXIgPT09IG51bGwgPyB7fSA6IHNvcnRlcjtcclxuXHRpZiAoc29ydGVyID09PSBudWxsKSB7XHJcblx0XHRmb3IgKGNvbnN0IHMgb2YgZ2V0U29ydGVyQWxsKCkpIHtcclxuXHRcdFx0c29ydGVyQ29ycmVjdGVkW3MubGFiZWxdID0gXCJcIjtcclxuXHRcdH1cclxuXHR9XHJcblx0Y29uc3QgZmxvd3JhdGUgPSBnZXRMb2NhbFJlY29yZChGTE9XUkFURV9LRVkpO1xyXG5cdGNvbnN0IGZsb3dyYXRlQ29ycmVjdGVkID1cclxuXHRcdGZsb3dyYXRlID09PSBudWxsID8ge30gOiBmbG93cmF0ZTtcclxuXHRpZiAoZmxvd3JhdGUgPT09IG51bGwpIHtcclxuXHRcdGZvciAoY29uc3QgayBpbiByZWNpcGUubWF0ZXJpYWxSZWNvcmQpIHtcclxuXHRcdFx0Zmxvd3JhdGVDb3JyZWN0ZWRba10gPSBcIlwiO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChjb25zdCBrIGluIHJlY2lwZS5wcm9kdWN0UmVjb3JkKSB7XHJcblx0XHRcdGZsb3dyYXRlQ29ycmVjdGVkW2tdID0gXCJcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbnN0IGRhdGE6IENvbmZpZ0Zvcm1EYXRhID0ge1xyXG5cdFx0ZmFjaWxpdHksXHJcblx0XHRyZWNpcGUsXHJcblx0XHRwcm9saWZlcmF0b3IsXHJcblx0XHRwcm9saWZlcmF0b3JTcHJheUNvdW50LFxyXG5cdFx0c29ydGVyOiBzb3J0ZXJDb3JyZWN0ZWQsXHJcblx0XHRmbG93cmF0ZTogZmxvd3JhdGVDb3JyZWN0ZWQsXHJcblx0fTtcclxuXHRyZXR1cm4gZGF0YTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMb2NhbFByb2xpZmVyYXRvclNwcmF5Q291bnQgPVxyXG5cdCgpID0+IHtcclxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcclxuXHRcdFx0UFJPTElGRVJBVE9SX1NQUkFZX0NPVU5UX0tFWSxcclxuXHRcdCk7XHJcblx0fTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMb2NhbFJlY29yZCA9IChcclxuXHRrZXk6IHN0cmluZyxcclxuKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGwgPT4ge1xyXG5cdHRyeSB7XHJcblx0XHRjb25zdCBqc29uU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuXHRcdGlmIChqc29uU3RyaW5nID09PSBudWxsKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QganNvbk9iaiA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XHJcblx0XHRpZiAodHlwZW9mIGpzb25PYmogIT09IFwib2JqZWN0XCIpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblx0XHRmb3IgKGNvbnN0IGtleSBpbiBqc29uT2JqIGFzIE9iamVjdCkge1xyXG5cdFx0XHRpZiAodHlwZW9mIGpzb25PYmpba2V5XSAhPT0gXCJzdHJpbmdcIikge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ganNvbk9iajtcclxuXHR9IGNhdGNoIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMb2NhbEZhY2lsaXR5ID0gKCkgPT4ge1xyXG5cdGNvbnN0IGxhYmVsID1cclxuXHRcdGxvY2FsU3RvcmFnZS5nZXRJdGVtKEZBQ0lMSVRZX0tFWSk7XHJcblx0aWYgKGxhYmVsID09PSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHRyZXR1cm4gZ2V0RmFjaWxpdHkobGFiZWwpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldExvY2FsUmVjaXBlID0gKCkgPT4ge1xyXG5cdGNvbnN0IGxhYmVsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oUkVDSVBFX0tFWSk7XHJcblx0aWYgKGxhYmVsID09PSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHRyZXR1cm4gZ2V0UmVjaXBlKGxhYmVsKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMb2NhbFByb2xpZmVyYXRvciA9ICgpID0+IHtcclxuXHRjb25zdCBsYWJlbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFxyXG5cdFx0UFJPTElGRVJBVE9SX0tFWSxcclxuXHQpO1xyXG5cdGlmIChsYWJlbCA9PT0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHR9XHJcblx0cmV0dXJuIGdldFByb2xpZmVyYXRvcihsYWJlbCk7XHJcbn07XHJcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlTGFiZWxPYmplY3QgPSA8XHJcblx0VCBleHRlbmRzIHsgbGFiZWw6IHN0cmluZyB9LFxyXG4+KFxyXG5cdGtleTogc3RyaW5nLFxyXG5cdGluaXQ6IFQsXHJcbik6IFtULCAobmV4dDogVCkgPT4gdm9pZF0gPT4ge1xyXG5cdGNvbnN0IFtpdGVtLCBzZXRJdGVtXSA9IHVzZVN0YXRlKGluaXQpO1xyXG5cclxuXHRjb25zdCBoYW5kbGVTZXQgPSAobmV4dDogVCkgPT4ge1xyXG5cdFx0c2V0SXRlbShuZXh0KTtcclxuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgbmV4dC5sYWJlbCk7XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIFtpdGVtLCBoYW5kbGVTZXRdO1xyXG59O1xyXG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuLyoqXHJcbiAqIEB2ZXJzaW9uIDIuNS4wXHJcbiAqXHJcbiAqIEEgZ2xvYmFsIGhvb2sgZm9yIGBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+YC10eXBlIHJlY29yZC5cclxuICpcclxuICogVGhpcyBob29rIGlzIHdyYXBwZXIgYXJvdW5kIGEgYHVzZVN0YXRlYCBob29rIHdpdGggdHdvIHNpbXBsaWZpZWQgY2FsbGJhY2tzLiBUaGUgZmlyc3QgcmVwbGFjZXMgdGhlIHJlY29yZCB3aXRoIGEgbmV3IG9uZSwgYW5kIHRoZSBzZWNvbmQgdXBkYXRlcyB0aGUgdmFsdWUgb2YgYSBnaXZlbiBrZXkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlUmVjb3JkID0gKFxyXG5cdGtleTogc3RyaW5nLFxyXG5cdGluaXQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXHJcbik6IFtcclxuXHRSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdChrOiBzdHJpbmcsIHY6IHN0cmluZykgPT4gdm9pZCxcclxuXHQobjogUmVjb3JkPHN0cmluZywgc3RyaW5nPikgPT4gdm9pZCxcclxuXHQoXHJcblx0XHRmbjogKFxyXG5cdFx0XHRwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdFx0KSA9PiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdCkgPT4gdm9pZCxcclxuXSA9PiB7XHJcblx0Y29uc3QgW2l0ZW0sIHNldEl0ZW1dID0gdXNlU3RhdGUoaW5pdCk7XHJcblxyXG5cdGNvbnN0IGhhbmRsZVJlcGxhY2UgPSAoXHJcblx0XHRuZXh0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdCkgPT4ge1xyXG5cdFx0c2V0SXRlbShuZXh0KTtcclxuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxyXG5cdFx0XHRrZXksXHJcblx0XHRcdEpTT04uc3RyaW5naWZ5KG5leHQpLFxyXG5cdFx0KTtcclxuXHR9O1xyXG5cdGNvbnN0IGhhbmRsZVJlcGxhY2VGbiA9IChcclxuXHRcdGZuOiAoXHJcblx0XHRcdHByZXY6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXHJcblx0XHQpID0+IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXHJcblx0KSA9PiB7XHJcblx0XHRzZXRJdGVtKChwcmV2KSA9PiB7XHJcblx0XHRcdGNvbnN0IG5leHQgPSBmbihwcmV2KTtcclxuXHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXHJcblx0XHRcdFx0a2V5LFxyXG5cdFx0XHRcdEpTT04uc3RyaW5naWZ5KG5leHQpLFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gbmV4dDtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IGhhbmRsZVVwZGF0ZSA9IChrOiBzdHJpbmcsIHY6IHN0cmluZykgPT4ge1xyXG5cdFx0c2V0SXRlbSgocHJldikgPT4ge1xyXG5cdFx0XHRjb25zdCBuZXh0ID0geyAuLi5wcmV2IH07XHJcblx0XHRcdG5leHRba10gPSB2O1xyXG5cdFx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcclxuXHRcdFx0XHRrZXksXHJcblx0XHRcdFx0SlNPTi5zdHJpbmdpZnkobmV4dCksXHJcblx0XHRcdCk7XHJcblx0XHRcdHJldHVybiBuZXh0O1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0cmV0dXJuIFtcclxuXHRcdGl0ZW0sXHJcblx0XHRoYW5kbGVVcGRhdGUsXHJcblx0XHRoYW5kbGVSZXBsYWNlLFxyXG5cdFx0aGFuZGxlUmVwbGFjZUZuLFxyXG5cdF07XHJcbn07XHJcbiIsImltcG9ydCB7IHNhZmVQYXJzZUNsYW1wIH0gZnJvbSBcIn5jb3JlL3BhcnNpbmdcIjtcclxuaW1wb3J0IHsgRkxPV1JBVEVfS0VZIH0gZnJvbSBcIn5kYXRhYmFzZS9sb2NhbFwiO1xyXG5pbXBvcnQgeyB1c2VSZWNvcmQgfSBmcm9tIFwiLi91c2VSZWNvcmRcIjtcclxuXHJcbmNvbnN0IGNvdW50VGFrZW5GbG93ID0gKFxyXG5cdGtleTogc3RyaW5nLFxyXG5cdHJlYzogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcclxuXHR0b3RhbEZsb3c6IG51bWJlcixcclxuKSA9PiB7XHJcblx0bGV0IHRha2VuRmxvdyA9IDA7XHJcblx0Zm9yIChjb25zdCBrIGluIHJlYykge1xyXG5cdFx0aWYgKGsgPT09IGtleSkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdHRha2VuRmxvdyArPSBzYWZlUGFyc2VDbGFtcChcclxuXHRcdFx0cmVjW2tdLFxyXG5cdFx0XHQwLFxyXG5cdFx0XHR0b3RhbEZsb3cgLSB0YWtlbkZsb3csXHJcblx0XHQpO1xyXG5cdH1cclxuXHRyZXR1cm4gdGFrZW5GbG93O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUZsb3dyYXRlID0gKFxyXG5cdGluaXQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXHJcbik6IFtcclxuXHRSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdChsOiBzdHJpbmcsIHY6IHN0cmluZywgYzogbnVtYmVyKSA9PiB2b2lkLFxyXG5cdChuOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiB2b2lkLFxyXG5dID0+IHtcclxuXHRjb25zdCBbaXRlbSwgLCBoYW5kbGVSZXBsYWNlLCBoYW5kbGVSZXBsYWNlRm5dID1cclxuXHRcdHVzZVJlY29yZChGTE9XUkFURV9LRVksIGluaXQpO1xyXG5cclxuXHRjb25zdCBoYW5kbGVVcGRhdGUgPSAoXHJcblx0XHRrZXk6IHN0cmluZyxcclxuXHRcdG5leHRWYWx1ZTogc3RyaW5nLFxyXG5cdFx0dG90YWxGbG93OiBudW1iZXIsXHJcblx0KSA9PiB7XHJcblx0XHRoYW5kbGVSZXBsYWNlRm4oKHByZXYpID0+IHtcclxuXHRcdFx0Y29uc3QgbmV4dCA9IHsgLi4ucHJldiB9O1xyXG5cdFx0XHRpZiAobmV4dFZhbHVlID09PSBcIlwiKSB7XHJcblx0XHRcdFx0bmV4dFtrZXldID0gXCJcIjtcclxuXHRcdFx0XHRyZXR1cm4gbmV4dDtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zdCB0YWtlbkZsb3cgPSBjb3VudFRha2VuRmxvdyhcclxuXHRcdFx0XHRrZXksXHJcblx0XHRcdFx0cHJldixcclxuXHRcdFx0XHR0b3RhbEZsb3csXHJcblx0XHRcdCk7XHJcblx0XHRcdGNvbnN0IGxlZnRvdmVyRmxvdyA9IHNhZmVQYXJzZUNsYW1wKFxyXG5cdFx0XHRcdG5leHRWYWx1ZSxcclxuXHRcdFx0XHQwLFxyXG5cdFx0XHRcdHRvdGFsRmxvdyAtIHRha2VuRmxvdyxcclxuXHRcdFx0KTtcclxuXHRcdFx0bmV4dFtrZXldID0gbGVmdG92ZXJGbG93LnRvU3RyaW5nKCk7XHJcblx0XHRcdHJldHVybiBuZXh0O1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHRyZXR1cm4gW2l0ZW0sIGhhbmRsZVVwZGF0ZSwgaGFuZGxlUmVwbGFjZV07XHJcbn07XHJcbiIsImltcG9ydCB7IHNhZmVQYXJzZUNsYW1wIH0gZnJvbSBcIn5jb3JlL3BhcnNpbmdcIjtcclxuaW1wb3J0IHsgU09SVEVSX0tFWSB9IGZyb20gXCJ+ZGF0YWJhc2UvbG9jYWxcIjtcclxuaW1wb3J0IHsgdXNlUmVjb3JkIH0gZnJvbSBcIi4vdXNlUmVjb3JkXCI7XHJcblxyXG4vKipcclxuICogQ291bnRzIHRoZSBudW1iZXIgb2YgdGFrZW4gc29ydGVyIHBvcnRzLCBleGNsdWRpbmcgdGhlIG9uZSBnaXZlbiBhcyB0aGUgbGFiZWwuXHJcbiAqL1xyXG5jb25zdCBjb3VudFRha2VuUG9ydHMgPSAoXHJcblx0a2V5OiBzdHJpbmcsXHJcblx0cmVjOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdHRvdGFsOiBudW1iZXIsXHJcbik6IG51bWJlciA9PiB7XHJcblx0bGV0IGNvdW50ID0gMDtcclxuXHRmb3IgKGNvbnN0IGsgaW4gcmVjKSB7XHJcblx0XHRpZiAoayA9PT0ga2V5KSB7XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cdFx0Y291bnQgKz0gc2FmZVBhcnNlQ2xhbXAoXHJcblx0XHRcdHJlY1trXSxcclxuXHRcdFx0MCxcclxuXHRcdFx0dG90YWwgLSBjb3VudCxcclxuXHRcdCk7XHJcblx0fVxyXG5cdHJldHVybiBjb3VudDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAdmVyc2lvbiAyLjUuMFxyXG4gKlxyXG4gKiBHbG9iYWwgaG9vayBmb3Igc29ydGVyIGRhdGEuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayBpcyBlc3NlbnRpYWxseSBqdXN0IGEgd3JhcHBlciBhcm91bmQgYSBgdXNlU3RhdGVgIGhvb2suIEl0IGV4cG9zZXMgaXRzIG93biBgc2V0U3RhdGVgIGZ1bmN0aW9uIGZvciBjYWxsYmFjay5cclxuICpcclxuICogQWx0aG91Z2ggdGhpcyBob29rIHVzZXMgYSBoYXJkLWNvZGVkIGxvY2FsU3RvcmFnZSBrZXkgdG8gc2F2ZSB0aGUgcmVjb3JkLCBpdCBkb2VzIG5vdCBsb2FkIHRoZSBpbml0aWFsIGRhdGEgZnJvbSBsb2NhbFN0b3JhZ2UuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlU29ydGVyID0gKFxyXG5cdGluaXQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXHJcbik6IFtcclxuXHRSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxyXG5cdChrOiBzdHJpbmcsIHY6IHN0cmluZywgYzogbnVtYmVyKSA9PiB2b2lkLFxyXG5dID0+IHtcclxuXHRjb25zdCBbaXRlbSwgLCAsIHNldEl0ZW1dID0gdXNlUmVjb3JkKFxyXG5cdFx0U09SVEVSX0tFWSxcclxuXHRcdGluaXQsXHJcblx0KTtcclxuXHJcblx0LyoqXHJcblx0ICogU2luY2UgdGhlIGRhdGEgc3RvcmVkIGluIHRoZSBgdXNlU3RhdGVgIGhvb2sgaXMgYSBgUmVjb3JkPHN0cmluZywgc3RyaW5nPmAgdHlwZSwgdGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhbiBpbnRlcmZhY2UgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGtleS5cclxuXHQgKi9cclxuXHRjb25zdCBoYW5kbGVDaGFuZ2UgPSAoXHJcblx0XHRrZXk6IHN0cmluZyxcclxuXHRcdG5leHRWYWx1ZTogc3RyaW5nLFxyXG5cdFx0dG90YWxQb3J0czogbnVtYmVyLFxyXG5cdCkgPT4ge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBTYXkgSSBoYXZlIGEgZmFjaWxpdHkgd2l0aCAxMiBwb3J0cyBhbmQgKDksMiwwLDApIHN0YXRlLlxyXG5cdFx0ICogIFRoZW4sIHRoZSB1c2VyIHJlcXVlc3RlZCB0byByZWdpc3RlciAoOSwyLDQsMCkgYXMgdGhlIG5ldyBzdGF0ZS5cclxuXHRcdCAqXHJcblx0XHQgKiAxLiBjb3VudHMgdGhlIG51bWJlciBvZiB0YWtlbiBwb3J0cyBleGNlcHQgdGhlIG9uZSBiZWluZyBtb2RpZmllZFxyXG5cdFx0ICogMi4gY29tcHV0ZSB0aGUgbGVmdG92ZXIgcG9ydHNcclxuXHRcdCAqIDMuIGNsYW1wIHRoZSByZXF1ZXN0ZWQgYW1vdW50IGJldHdlZW4gWzAsIGxlZnRvdmVyXVxyXG5cdFx0ICpcclxuXHRcdCAqIEV2ZW4gdGhvdWdoLCB0aGUgdXNlciByZXF1ZXN0ZWQgKDksMiw0LDApLCAoOSwyLDEsMCkgaXMgcmVnaXN0ZXJlZC5cclxuXHRcdCAqL1xyXG5cdFx0c2V0SXRlbSgocHJldikgPT4ge1xyXG5cdFx0XHRjb25zdCBuZXh0ID0geyAuLi5wcmV2IH07XHJcblx0XHRcdGlmIChuZXh0VmFsdWUgPT09IFwiXCIpIHtcclxuXHRcdFx0XHRuZXh0W2tleV0gPSBcIlwiO1xyXG5cdFx0XHRcdHJldHVybiBuZXh0O1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnN0IHRha2VuUG9ydHMgPSBjb3VudFRha2VuUG9ydHMoXHJcblx0XHRcdFx0a2V5LFxyXG5cdFx0XHRcdHByZXYsXHJcblx0XHRcdFx0dG90YWxQb3J0cyxcclxuXHRcdFx0KTtcclxuXHRcdFx0Y29uc3QgbGVmdG92ZXJQb3J0cyA9IHNhZmVQYXJzZUNsYW1wKFxyXG5cdFx0XHRcdG5leHRWYWx1ZSxcclxuXHRcdFx0XHQwLFxyXG5cdFx0XHRcdHRvdGFsUG9ydHMgLSB0YWtlblBvcnRzLFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRuZXh0W2tleV0gPSBsZWZ0b3ZlclBvcnRzLnRvU3RyaW5nKCk7XHJcblx0XHRcdHJldHVybiBuZXh0O1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHRyZXR1cm4gW2l0ZW0sIGhhbmRsZUNoYW5nZV07XHJcbn07XHJcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlU3RyaW5nID0gKFxyXG5cdGtleTogc3RyaW5nLFxyXG5cdGluaXQ6IHN0cmluZyxcclxuKTogW3N0cmluZywgKG5leHQ6IHN0cmluZykgPT4gdm9pZF0gPT4ge1xyXG5cdGNvbnN0IFtpdGVtLCBzZXRJdGVtXSA9IHVzZVN0YXRlKGluaXQpO1xyXG5cclxuXHRjb25zdCBoYW5kbGVDaGFuZ2UgPSAobmV4dDogc3RyaW5nKSA9PiB7XHJcblx0XHRzZXRJdGVtKG5leHQpO1xyXG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBuZXh0KTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gW2l0ZW0sIGhhbmRsZUNoYW5nZV07XHJcbn07XHJcbiIsImltcG9ydCB7XHJcblx0RmFjaWxpdHksXHJcblx0UHJvbGlmZXJhdG9yLFxyXG5cdFByb2xpZmVyYXRvck1vZGUsXHJcblx0UmVjaXBlLFxyXG59IGZyb20gXCJAZXVyeWRvcy9kc3AtaXRlbS1yZWdpc3RyeVwiO1xyXG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHtcclxuXHRnZXRQcm9saWZlcmF0b3JXaXRoTW9kZSxcclxuXHRnZXRSZWNpcGVXaXRoVHlwZSxcclxufSBmcm9tIFwifmFzc2V0cy9nZXRcIjtcclxuaW1wb3J0IHtcclxuXHRDQVBBQ0lUWV9LRVksXHJcblx0Q09NUFVURV9NT0RFX0tFWSxcclxuXHRDT05TVFJBSU5UX0tFWSxcclxuXHRGQUNJTElUWV9LRVksXHJcblx0UFJPTElGRVJBVE9SX0tFWSxcclxuXHRQUk9MSUZFUkFUT1JfU1BSQVlfQ09VTlRfS0VZLFxyXG5cdFJFQ0lQRV9LRVksXHJcblx0Z2V0TG9jYWxDb21wdXRlRm9ybURhdGEsXHJcblx0Z2V0TG9jYWxDb25maWdGb3JtRGF0YSxcclxufSBmcm9tIFwifmRhdGFiYXNlL2xvY2FsXCI7XHJcbmltcG9ydCB7XHJcblx0RWRpdG9yRm9ybURhdGEsXHJcblx0RWRpdG9yRm9ybUhhbmRsZXJzLFxyXG59IGZyb20gXCJ+dHlwZXMvcXVlcnlcIjtcclxuaW1wb3J0IHsgdXNlTGFiZWxPYmplY3QgfSBmcm9tIFwiLi91ZXNMYWJlbE9iamVjdFwiO1xyXG5pbXBvcnQgeyB1c2VGbG93cmF0ZSB9IGZyb20gXCIuL3VzZUZsb3dyYXRlXCI7XHJcbmltcG9ydCB7IHVzZVJlY29yZCB9IGZyb20gXCIuL3VzZVJlY29yZFwiO1xyXG5pbXBvcnQgeyB1c2VTb3J0ZXIgfSBmcm9tIFwiLi91c2VTb3J0ZXJcIjtcclxuaW1wb3J0IHsgdXNlU3RyaW5nIH0gZnJvbSBcIi4vdXNlU3RyaW5nXCI7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlRWRpdG9yRm9ybSA9ICgpID0+IHtcclxuXHRjb25zdCB7IGN1cnJlbnQ6IGNvbmZpZ0luaXQgfSA9IHVzZVJlZihcclxuXHRcdGdldExvY2FsQ29uZmlnRm9ybURhdGEoKSxcclxuXHQpO1xyXG5cdGNvbnN0IHsgY3VycmVudDogY29tcHV0ZUluaXQgfSA9IHVzZVJlZihcclxuXHRcdGdldExvY2FsQ29tcHV0ZUZvcm1EYXRhKCksXHJcblx0KTtcclxuXHJcblx0Y29uc3QgW2ZhY2lsaXR5LCBzZXRGYWNpbGl0eV0gPSB1c2VMYWJlbE9iamVjdChcclxuXHRcdEZBQ0lMSVRZX0tFWSxcclxuXHRcdGNvbmZpZ0luaXQuZmFjaWxpdHksXHJcblx0KTtcclxuXHRjb25zdCBbcmVjaXBlLCBzZXRSZWNpcGVdID0gdXNlTGFiZWxPYmplY3QoXHJcblx0XHRSRUNJUEVfS0VZLFxyXG5cdFx0Y29uZmlnSW5pdC5yZWNpcGUsXHJcblx0KTtcclxuXHRjb25zdCBbc29ydGVyLCBzZXRTb3J0ZXJdID0gdXNlU29ydGVyKFxyXG5cdFx0Y29uZmlnSW5pdC5zb3J0ZXIsXHJcblx0KTtcclxuXHRjb25zdCBbcHJvbGlmZXJhdG9yLCBzZXRQcm9saWZlcmF0b3JdID1cclxuXHRcdHVzZUxhYmVsT2JqZWN0KFxyXG5cdFx0XHRQUk9MSUZFUkFUT1JfS0VZLFxyXG5cdFx0XHRjb25maWdJbml0LnByb2xpZmVyYXRvcixcclxuXHRcdCk7XHJcblx0Y29uc3QgW1xyXG5cdFx0cHJvbGlmZXJhdG9yU3ByYXlDb3VudCxcclxuXHRcdGhhbmRsZVByb2xpZmVyYXRvclNwcmF5Q291bnRDaGFuZ2UsXHJcblx0XSA9IHVzZVN0cmluZyhcclxuXHRcdFBST0xJRkVSQVRPUl9TUFJBWV9DT1VOVF9LRVksXHJcblx0XHRjb25maWdJbml0LnByb2xpZmVyYXRvclNwcmF5Q291bnQsXHJcblx0KTtcclxuXHRjb25zdCBbZmxvd3JhdGUsIHVwZGF0ZUZsb3dyYXRlLCBzZXRGbG93cmF0ZV0gPVxyXG5cdFx0dXNlRmxvd3JhdGUoY29uZmlnSW5pdC5mbG93cmF0ZSk7XHJcblxyXG5cdGNvbnN0IFtjb21wdXRlTW9kZSwgaGFuZGxlQ29tcHV0ZU1vZGVDaGFuZ2VdID1cclxuXHRcdHVzZVN0cmluZyhcclxuXHRcdFx0Q09NUFVURV9NT0RFX0tFWSxcclxuXHRcdFx0Y29tcHV0ZUluaXQuY29tcHV0ZU1vZGUsXHJcblx0XHQpO1xyXG5cdGNvbnN0IFtcclxuXHRcdGNvbnN0cmFpbnQsXHJcblx0XHRoYW5kbGVDb25zdHJhaW50VXBkYXRlLFxyXG5cdFx0aGFuZGxlQ29uc3RyYWludENoYW5nZSxcclxuXHRdID0gdXNlUmVjb3JkKFxyXG5cdFx0Q09OU1RSQUlOVF9LRVksXHJcblx0XHRjb21wdXRlSW5pdC5jb25zdHJhaW50LFxyXG5cdCk7XHJcblx0Y29uc3QgW1xyXG5cdFx0Y2FwYWNpdHksXHJcblx0XHRoYW5kbGVDYXBhY2l0eVVwZGF0ZSxcclxuXHRcdGhhbmRsZUNhcGFjaXR5Q2hhbmdlLFxyXG5cdF0gPSB1c2VSZWNvcmQoXHJcblx0XHRDQVBBQ0lUWV9LRVksXHJcblx0XHRjb21wdXRlSW5pdC5jYXBhY2l0eSxcclxuXHQpO1xyXG5cclxuXHRjb25zdCBoYW5kbGVGYWNpbGl0eUNoYW5nZSA9IChcclxuXHRcdG5leHRGOiBGYWNpbGl0eSxcclxuXHQpID0+IHtcclxuXHRcdHNldEZhY2lsaXR5KG5leHRGKTtcclxuXHRcdGNvbnN0IG5leHRSID0gZ2V0UmVjaXBlV2l0aFR5cGUoXHJcblx0XHRcdG5leHRGLnJlY2lwZVR5cGUsXHJcblx0XHQpO1xyXG5cdFx0aWYgKG5leHRSID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aGFuZGxlUmVjaXBlQ2hhbmdlKG5leHRSKTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBoYW5kbGVSZWNpcGVDaGFuZ2UgPSAobmV4dFI6IFJlY2lwZSkgPT4ge1xyXG5cdFx0c2V0UmVjaXBlKG5leHRSKTtcclxuXHRcdGlmIChcclxuXHRcdFx0bmV4dFIuc3BlZWR1cE9ubHkgJiZcclxuXHRcdFx0cHJvbGlmZXJhdG9yLm1vZGUgPT09IFwiRXh0cmEgUHJvZHVjdHNcIlxyXG5cdFx0KSB7XHJcblx0XHRcdGNvbnN0IG5leHRQID0gZ2V0UHJvbGlmZXJhdG9yV2l0aE1vZGUoXHJcblx0XHRcdFx0UHJvbGlmZXJhdG9yTW9kZS5QUk9EVUNUSU9OX1NQRUVEVVAsXHJcblx0XHRcdCk7XHJcblx0XHRcdGlmIChuZXh0UCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0c2V0UHJvbGlmZXJhdG9yKG5leHRQKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Y29uc3QgbmV4dEZsb3dyYXRlOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID1cclxuXHRcdFx0e307XHJcblx0XHRjb25zdCBuZXh0Q29uc3RyYWludDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9XHJcblx0XHRcdHt9O1xyXG5cdFx0Y29uc3QgbmV4dENhcGFjaXR5OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID1cclxuXHRcdFx0e307XHJcblx0XHRmb3IgKGNvbnN0IGsgaW4gbmV4dFIubWF0ZXJpYWxSZWNvcmQpIHtcclxuXHRcdFx0bmV4dENvbnN0cmFpbnRba10gPSBcIlwiO1xyXG5cdFx0XHRuZXh0Rmxvd3JhdGVba10gPSBcIjBcIjtcclxuXHRcdH1cclxuXHRcdGZvciAoY29uc3QgayBpbiBuZXh0Ui5wcm9kdWN0UmVjb3JkKSB7XHJcblx0XHRcdG5leHRDYXBhY2l0eVtrXSA9IFwiXCI7XHJcblx0XHRcdG5leHRGbG93cmF0ZVtrXSA9IFwiMFwiO1xyXG5cdFx0fVxyXG5cdFx0c2V0Rmxvd3JhdGUobmV4dEZsb3dyYXRlKTtcclxuXHRcdGhhbmRsZUNhcGFjaXR5Q2hhbmdlKG5leHRDYXBhY2l0eSk7XHJcblx0XHRoYW5kbGVDb25zdHJhaW50Q2hhbmdlKG5leHRDb25zdHJhaW50KTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBoYW5kbGVTb3J0ZXJDaGFuZ2UgPSAoXHJcblx0XHRsYWJlbDogc3RyaW5nLFxyXG5cdFx0dmFsdWU6IHN0cmluZyxcclxuXHQpID0+IHtcclxuXHRcdGNvbnN0IHsgY29ubmVjdGlvbkNvdW50IH0gPSBmYWNpbGl0eTtcclxuXHRcdHNldFNvcnRlcihsYWJlbCwgdmFsdWUsIGNvbm5lY3Rpb25Db3VudCk7XHJcblx0fTtcclxuXHJcblx0Y29uc3QgaGFuZGxlRmxvd3JhdGVDaGFuZ2UgPSAoXHJcblx0XHRpdGVtTGFiZWw6IHN0cmluZyxcclxuXHRcdHZhbHVlOiBzdHJpbmcsXHJcblx0KSA9PiB7XHJcblx0XHRjb25zdCB7IGNvbm5lY3Rpb25Db3VudCB9ID0gZmFjaWxpdHk7XHJcblx0XHR1cGRhdGVGbG93cmF0ZShcclxuXHRcdFx0aXRlbUxhYmVsLFxyXG5cdFx0XHR2YWx1ZSxcclxuXHRcdFx0Y29ubmVjdGlvbkNvdW50ICogNzIwMCxcclxuXHRcdCk7XHJcblx0fTtcclxuXHJcblx0Y29uc3QgaGFuZGxlUHJvbGlmZXJhdG9yQ2hhbmdlID0gKFxyXG5cdFx0bmV4dFA6IFByb2xpZmVyYXRvcixcclxuXHQpID0+IHtcclxuXHRcdHNldFByb2xpZmVyYXRvcihuZXh0UCk7XHJcblx0XHRoYW5kbGVQcm9saWZlcmF0b3JTcHJheUNvdW50Q2hhbmdlKFxyXG5cdFx0XHRuZXh0UC5zcHJheUNvdW50LnRvU3RyaW5nKCksXHJcblx0XHQpO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IGRhdGE6IEVkaXRvckZvcm1EYXRhID0ge1xyXG5cdFx0ZmFjaWxpdHksXHJcblx0XHRmbG93cmF0ZSxcclxuXHRcdHByb2xpZmVyYXRvcixcclxuXHRcdHByb2xpZmVyYXRvclNwcmF5Q291bnQsXHJcblx0XHRyZWNpcGUsXHJcblx0XHRzb3J0ZXIsXHJcblx0XHRjYXBhY2l0eSxcclxuXHRcdGNvbXB1dGVNb2RlLFxyXG5cdFx0Y29uc3RyYWludCxcclxuXHR9O1xyXG5cdGNvbnN0IGhhbmRsZXJzOiBFZGl0b3JGb3JtSGFuZGxlcnMgPSB7XHJcblx0XHRoYW5kbGVDb25zdHJhaW50VXBkYXRlLFxyXG5cdFx0aGFuZGxlQ2FwYWNpdHlVcGRhdGUsXHJcblx0XHRoYW5kbGVDb21wdXRlTW9kZUNoYW5nZSxcclxuXHRcdGhhbmRsZUZhY2lsaXR5Q2hhbmdlLFxyXG5cdFx0aGFuZGxlUHJvbGlmZXJhdG9yQ2hhbmdlLFxyXG5cdFx0aGFuZGxlUmVjaXBlQ2hhbmdlLFxyXG5cdFx0aGFuZGxlU29ydGVyQ2hhbmdlLFxyXG5cdFx0aGFuZGxlRmxvd3JhdGVDaGFuZ2UsXHJcblx0XHRoYW5kbGVQcm9saWZlcmF0b3JTcHJheUNvdW50Q2hhbmdlLFxyXG5cdH07XHJcblx0cmV0dXJuIHtcclxuXHRcdGRhdGEsXHJcblx0XHRoYW5kbGVycyxcclxuXHR9O1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG5cdEdyaWQsXHJcblx0UGFwZXIsXHJcblx0dXNlTWVkaWFRdWVyeSxcclxuXHR1c2VUaGVtZSxcclxufSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xyXG5pbXBvcnQgeyBGQywgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFBhZGRlZFBhcGVyIH0gZnJvbSBcIn5jb21wb25lbnRzL1BhZGRlZFBhcGVyXCI7XHJcblxyXG50eXBlIExheW91dFByb3BzID0ge1xyXG5cdHNsb3RTaWRlOiBSZWFjdE5vZGU7XHJcblx0c2xvdE1haW46IFJlYWN0Tm9kZTtcclxufTtcclxuZXhwb3J0IGNvbnN0IExheW91dDogRkM8TGF5b3V0UHJvcHM+ID0gKFxyXG5cdHByb3BzLFxyXG4pID0+IHtcclxuXHRjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XHJcblx0Y29uc3QgaXNTbWFsbFNjcmVlbiA9IHVzZU1lZGlhUXVlcnkoXHJcblx0XHR0aGVtZS5icmVha3BvaW50cy5kb3duKFwibWRcIiksXHJcblx0KTtcclxuXHRjb25zdCB7IHNsb3RNYWluLCBzbG90U2lkZSB9ID0gcHJvcHM7XHJcblxyXG5cdGlmIChpc1NtYWxsU2NyZWVuKSB7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHQ8UGFkZGVkUGFwZXJcclxuXHRcdFx0XHRzcXVhcmVcclxuXHRcdFx0XHRlbGV2YXRpb249ezB9XHJcblx0XHRcdD5cclxuXHRcdFx0XHQ8UGFkZGVkUGFwZXJcclxuXHRcdFx0XHRcdHNxdWFyZVxyXG5cdFx0XHRcdFx0ZWxldmF0aW9uPXsyfVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdHtzbG90U2lkZX1cclxuXHRcdFx0XHQ8L1BhZGRlZFBhcGVyPlxyXG5cdFx0XHRcdHtzbG90TWFpbn1cclxuXHRcdFx0PC9QYWRkZWRQYXBlcj5cclxuXHRcdCk7XHJcblx0fVxyXG5cdHJldHVybiAoXHJcblx0XHQ8UGFwZXJcclxuXHRcdFx0c3F1YXJlXHJcblx0XHRcdGVsZXZhdGlvbj17MH1cclxuXHRcdD5cclxuXHRcdFx0PEdyaWRcclxuXHRcdFx0XHRjb250YWluZXJcclxuXHRcdFx0XHRjb2x1bW5zPXsxMH1cclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxHcmlkXHJcblx0XHRcdFx0XHRpdGVtXHJcblx0XHRcdFx0XHRtZFxyXG5cdFx0XHRcdFx0cGFkZGluZz17NH1cclxuXHRcdFx0XHRcdGhlaWdodD1cIjEwMHZoXCJcclxuXHRcdFx0XHRcdG92ZXJmbG93PVwiYXV0b1wiXHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0e3Nsb3RNYWlufVxyXG5cdFx0XHRcdDwvR3JpZD5cclxuXHRcdFx0XHQ8R3JpZFxyXG5cdFx0XHRcdFx0aXRlbVxyXG5cdFx0XHRcdFx0bWQ9ezN9XHJcblx0XHRcdFx0XHRoZWlnaHQ9XCIxMDB2aFwiXHJcblx0XHRcdFx0XHRvdmVyZmxvdz1cImF1dG9cIlxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdDxQYWRkZWRQYXBlclxyXG5cdFx0XHRcdFx0XHRzcXVhcmVcclxuXHRcdFx0XHRcdFx0ZWxldmF0aW9uPXsyfVxyXG5cdFx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0XHR7c2xvdFNpZGV9XHJcblx0XHRcdFx0XHQ8L1BhZGRlZFBhcGVyPlxyXG5cdFx0XHRcdDwvR3JpZD5cclxuXHRcdFx0PC9HcmlkPlxyXG5cdFx0PC9QYXBlcj5cclxuXHQpO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBTdGFjayB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IENvbXB1dGVGb3JtIH0gZnJvbSBcIn5jb21wb25lbnRzL0NvbXB1dGVGb3JtXCI7XHJcbmltcG9ydCB7IENvbmZpZ0Zvcm0gfSBmcm9tIFwifmNvbXBvbmVudHMvQ29uZmlnRm9ybVwiO1xyXG5pbXBvcnQgeyBGbG93cmF0ZVRhYmxlIH0gZnJvbSBcIn5jb21wb25lbnRzL0Zsb3dyYXRlVGFibGVcIjtcclxuaW1wb3J0IHsgSW5mb0dyb3VwIH0gZnJvbSBcIn5jb21wb25lbnRzL0luZm9Hcm91cFwiO1xyXG5pbXBvcnQgeyBQb3dlclVzYWdlVGFibGUgfSBmcm9tIFwifmNvbXBvbmVudHMvUG93ZXJVc2FnZVRhYmxlXCI7XHJcbmltcG9ydCB7IGNvbXB1dGVGbG93IH0gZnJvbSBcIn5jb3JlL3NvbHZlci9zb2x2ZXJGbG93XCI7XHJcbmltcG9ydCB7IGNvbXB1dGVQbGFjZW1lbnQgfSBmcm9tIFwifmNvcmUvc29sdmVyL3NvbHZlclBsYWNlbWVudFwiO1xyXG5pbXBvcnQgeyBjb21wdXRlUG93ZXJVc2FnZSB9IGZyb20gXCJ+Y29yZS9zb2x2ZXIvc29sdmVyUG93ZXJVc2FnZVwiO1xyXG5pbXBvcnQgeyB1c2VFZGl0b3JGb3JtIH0gZnJvbSBcIn5ob29rcy91c2VFZGl0b3JGb3JtXCI7XHJcbmltcG9ydCB7IExheW91dCB9IGZyb20gXCJ+bGF5b3V0cy9MYXlvdXRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBFZGl0b3I6IEZDID0gKCkgPT4ge1xyXG5cdGNvbnN0IHsgZGF0YSwgaGFuZGxlcnMgfSA9IHVzZUVkaXRvckZvcm0oKTtcclxuXHJcblx0Y29uc3QgZmxvd0RhdGEgPSBjb21wdXRlRmxvdyhkYXRhKTtcclxuXHRjb25zdCBwb3dlclVzYWdlRGF0YSA9IGNvbXB1dGVQb3dlclVzYWdlKGRhdGEpO1xyXG5cdGNvbnN0IHBsYWNlbWVudERhdGEgPSBjb21wdXRlUGxhY2VtZW50KGRhdGEpO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PExheW91dFxyXG5cdFx0XHRzbG90TWFpbj17XHJcblx0XHRcdFx0PFN0YWNrIHNwYWNpbmc9ezJ9PlxyXG5cdFx0XHRcdFx0PENvbXB1dGVGb3JtXHJcblx0XHRcdFx0XHRcdGRhdGE9e2RhdGF9XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJzPXtoYW5kbGVyc31cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQ8Rmxvd3JhdGVUYWJsZVxyXG5cdFx0XHRcdFx0XHRkYXRhPXtmbG93RGF0YX1cclxuXHRcdFx0XHRcdFx0cGxhY2VtZW50PXtwbGFjZW1lbnREYXRhfVxyXG5cdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdDxQb3dlclVzYWdlVGFibGVcclxuXHRcdFx0XHRcdFx0cGxhY2VtZW50PXtwbGFjZW1lbnREYXRhfVxyXG5cdFx0XHRcdFx0XHRkYXRhPXtwb3dlclVzYWdlRGF0YX1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQ8SW5mb0dyb3VwXHJcblx0XHRcdFx0XHRcdGRhdGE9e2RhdGF9XHJcblx0XHRcdFx0XHRcdHBsYWNlbWVudD17cGxhY2VtZW50RGF0YX1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0PC9TdGFjaz5cclxuXHRcdFx0fVxyXG5cdFx0XHRzbG90U2lkZT17XHJcblx0XHRcdFx0PENvbmZpZ0Zvcm1cclxuXHRcdFx0XHRcdGRhdGE9e2RhdGF9XHJcblx0XHRcdFx0XHRoYW5kbGVycz17aGFuZGxlcnN9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0fVxyXG5cdFx0Lz5cclxuXHQpO1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG5cdGFscGhhLFxyXG5cdGNyZWF0ZVRoZW1lLFxyXG59IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcblxyXG5leHBvcnQgY29uc3QgdGhlbWUgPSBjcmVhdGVUaGVtZSh7XHJcblx0Y29tcG9uZW50czoge1xyXG5cdFx0TXVpQ3NzQmFzZWxpbmU6IHtcclxuXHRcdFx0c3R5bGVPdmVycmlkZXM6IGBpbWcge1xyXG5cdFx0XHRcdFx0bG9hZGluZzogbGF6eTtcclxuXHRcdFx0XHRcdHdpZHRoOiBhdXRvO1xyXG5cdFx0XHRcdFx0aGVpZ2h0OiA0MHB4O1xyXG5cdFx0XHR9YCxcclxuXHRcdH0sXHJcblx0fSxcclxuXHRwYWxldHRlOiB7XHJcblx0XHRtb2RlOiBcImRhcmtcIixcclxuXHRcdHRleHQ6IHtcclxuXHRcdFx0cHJpbWFyeTogYWxwaGEoXCIjZmZmXCIsIDAuODcpLFxyXG5cdFx0fSxcclxuXHRcdHByaW1hcnk6IHtcclxuXHRcdFx0bWFpbjogXCIjN0FCQkFEXCIsXHJcblx0XHR9LFxyXG5cdFx0c2Vjb25kYXJ5OiB7XHJcblx0XHRcdG1haW46IFwiI0M4QUE4MVwiLFxyXG5cdFx0fSxcclxuXHRcdGJhY2tncm91bmQ6IHtcclxuXHRcdFx0cGFwZXI6IFwiIzE4MUQyMlwiLFxyXG5cdFx0fSxcclxuXHR9LFxyXG59KTtcclxuIiwiaW1wb3J0IHtcclxuXHRDc3NCYXNlbGluZSxcclxuXHRUaGVtZVByb3ZpZGVyLFxyXG59IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XHJcbmltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gXCJ+cGFnZXMvRWRpdG9yXCI7XHJcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSBcIi4vdGhlbWVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBBcHA6IEZDID0gKCkgPT4ge1xyXG5cdHJldHVybiAoXHJcblx0XHQ8VGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxyXG5cdFx0XHQ8Q3NzQmFzZWxpbmUgLz5cclxuXHRcdFx0PEVkaXRvciAvPlxyXG5cdFx0PC9UaGVtZVByb3ZpZGVyPlxyXG5cdCk7XHJcbn07XHJcbiIsImltcG9ydCBcIkBmb250c291cmNlL3JvYm90by8zMDAuY3NzXCI7XHJcbmltcG9ydCBcIkBmb250c291cmNlL3JvYm90by80MDAuY3NzXCI7XHJcbmltcG9ydCBcIkBmb250c291cmNlL3JvYm90by81MDAuY3NzXCI7XHJcbmltcG9ydCBcIkBmb250c291cmNlL3JvYm90by83MDAuY3NzXCI7XHJcbmltcG9ydCB7IFN0cmljdE1vZGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuL0FwcFwiO1xyXG5cclxuY3JlYXRlUm9vdChcclxuXHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikgYXMgSFRNTEVsZW1lbnQsXHJcbikucmVuZGVyKFxyXG5cdDxTdHJpY3RNb2RlPlxyXG5cdFx0PEFwcCAvPlxyXG5cdDwvU3RyaWN0TW9kZT4sXHJcbik7XHJcbiJdLCJuYW1lcyI6WyJ0b0ljb25VUkwiLCJvcHRpb24iLCJwcm9saWZlcmF0b3JUb0ljb25VUkwiLCJpdGVtIiwiUGFkZGVkUGFwZXIiLCJzdHlsZWQiLCJQYXBlciIsInRoZW1lIiwiU3R5bGVkVGV4dEZpZWxkIiwicHJvcHMiLCJwbGFjZWhvbGRlciIsImRpc2FibGVkIiwibWF4TGVuZ3RoIiwicHJlZml4Iiwic3VmZml4IiwibGFiZWwiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwiaGFuZGxlVmFsdWVDaGFuZ2UiLCJldmVudCIsIm5leHRWYWx1ZSIsImpzeCIsIlRleHRGaWVsZCIsIklucHV0QWRvcm5tZW50IiwiQ29tcHV0ZUZvcm0iLCJkYXRhIiwiaGFuZGxlcnMiLCJoYW5kbGVDb21wdXRlTW9kZUNoYW5nZSIsIl8iLCJpdGVtcyIsImZuIiwiaXRlbUZpZWxkcyIsImpzeHMiLCJHcmlkIiwiSWNvbkJ1dHRvbiIsIlJlc3RhcnRBbHRSb3VuZGVkIiwiVGFicyIsIlRhYiIsIkNvbGxhcHNpYmxlIiwidGl0bGUiLCJjaGlsZHJlbiIsImNvbGxhcHNlZCIsInNldENvbGxhcHNlZCIsInVzZVN0YXRlIiwiaGFuZGxlQ29sbGFwc2VUb2dnbGUiLCJleHBhbmRJY29uIiwiRXhwYW5kTW9yZVJvdW5kZWQiLCJFeHBhbmRMZXNzUm91bmRlZCIsIkZyYWdtZW50IiwiU3RhY2siLCJUeXBvZ3JhcGh5IiwiQ29sbGFwc2UiLCJnZXRGYWNpbGl0eSIsIkZBQ0lMSVRZX1JFR0lTVFJZIiwiZ2V0RmFjaWxpdHlBbGwiLCJnZXRSZWNpcGVXaXRoVHlwZSIsInJUeXBlIiwiUkVDSVBFX1JFR0lTVFJZIiwiZ2V0UmVjaXBlIiwiZ2V0UmVjaXBlQWxsIiwiZ2V0UHJvbGlmZXJhdG9yIiwiUFJPTElGRVJBVE9SX1JFR0lTVEVSWSIsImdldFByb2xpZmVyYXRvckFsbCIsImdldFByb2xpZmVyYXRvcldpdGhNb2RlIiwibW9kZSIsImdldFNvcnRlckFsbCIsIlNPUlRFUl9SRUdJU1RSWSIsImdldFNvcnRlciIsIkZhY2lsaXR5U2VsZWN0Iiwib3B0aW9ucyIsInVzZVJlZiIsImhhbmRsZUNoYW5nZSIsImUiLCJuZXh0IiwiTWVudUl0ZW0iLCJMaXN0SXRlbUljb24iLCJMaXN0SXRlbVRleHQiLCJTZWxlY3QiLCJGbG93cmF0ZUZpZWxkIiwiaGFuZGxlUmVzZXQiLCJQcm9sZmllcmF0b3JTcHJheUNvdW50RmllbGQiLCJkZWZhdWx0VmFsdWUiLCJQcm9saWZlcmF0b3JTZWxlY3QiLCJzcGVlZHVwT25seSIsImFjdGl2ZU9wdGlvbnMiLCJkaXNhYmxlZE9wdGlvbnMiLCJvcHQiLCJQcm9saWZlcmF0b3JNb2RlIiwiYWN0aXZlSXRlbXMiLCJkaXNhYmxlZEl0ZW1zIiwiUmVjaXBlU2VsZWN0IiwicmVjaXBlVHlwZSIsIlN0eWxlZE51bWJlckZpZWxkIiwiayIsIkNvbmZpZ0Zvcm0iLCJmbG93cmF0ZUZpZWxkR3JvdXAiLCJzb3J0ZXJGaWVsZEdyb3VwIiwiR0FNRV9WRVJTSU9OIiwiU3R5bGVkVGFibGVIZWFkQ2VsbCIsIlRhYmxlQ2VsbCIsImZvcm1hdHRlciIsImZvcm1hdE51bWJlciIsIlN0eWxlZFRhYmxlUm93IiwicGVyQXJyYXkiLCJwZXJGYWNpbGl0eSIsInBlclRvdGFsIiwidGFibGVDZWxscyIsImluZGV4IiwiaWNvblVSTCIsInAiLCJUYWJsZVJvdyIsIlN0eWxlZFRhYmxlSGVhZCIsIkZsb3dyYXRlVGFibGUiLCJwbGFjZW1lbnQiLCJtYXRlcmlhbEZsb3dQZXJNaW51dGVQZXJGYWNpbGl0eSIsInByb2R1Y3RGbG93UGVyTWludXRlUGVyRmFjaWxpdHkiLCJmYWNpbGl0aWVzTmVlZGVkIiwiZmFjaWxpdGllc1BlckFycmF5IiwicmVuZGVyZWRNYXRlcmlhbFJvd3MiLCJyZW5kZXJlZFByb2R1Y3RSb3dzIiwiVGFibGVDb250YWluZXIiLCJUYWJsZSIsIlRhYmxlSGVhZCIsIlRhYmxlQm9keSIsIlBsYWNlbWVudEluZm8iLCJGYWN0b3J5Um91bmRlZCIsIngiLCJyZW5kZXJlZEl0ZW1zIiwiaWNvbiIsInJlbmRlciIsIkxpc3RJdGVtIiwiTGlzdCIsIkxpc3RTdWJoZWFkZXIiLCJSZWNpcGVJbmZvIiwicmVjaXBlIiwiU3BlZWRSb3VuZGVkIiwiRGF0YVNhdmVyT2ZmUm91bmRlZCIsIlJlbW92ZVJvdW5kZWQiLCJyYXRpbyIsIkFkZFJvdW5kZWQiLCJQcm9saWZlcmF0b3JJbmZvIiwicHJvbGlmZXJhdG9yIiwicHJvbGlmIiwiQm9sdFJvdW5kZWQiLCJGYWNpbGl0eUluZm8iLCJmYWNpbGl0eSIsIkFiY1JvdW5kZWQiLCJDYXRlZ29yeVJvdW5kZWQiLCJVc2JSb3VuZGVkIiwiSW5mb0dyb3VwIiwiQm94IiwiUG93ZXJVc2FnZVRhYmxlIiwid29ya1VzYWdlTVdQZXJGYWNpbGl0eSIsImlkbGVVc2FnZU1XUGVyRmFjaWxpdHkiLCJ3b3JrVXNhZ2VJdGVtcyIsImlkbGVVc2FnZUl0ZW1zIiwic2FmZVBhcnNlQ2xhbXAiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwiY29tcHV0ZURlbWFuZFBlck1pbnV0ZVBlckZhY2lsaXR5IiwiY29uZmlnRm9ybURhdGEiLCJmIiwiciIsInBTQyIsImN5Y2xlVGltZVNlY29uZCIsIm1hdGVyaWFsUmVjb3JkIiwiY3ljbGVzIiwicmVzdWx0Iiwic3ByYXlDb3VudCIsInByb2xpZk1hdGVyaWFsQ29zdCIsInByb2xpZlByb2R1Y3RDb3N0IiwiY29tcHV0ZVByb2R1Y3Rpb25QZXJNaW51dGVQZXJGYWNpbGl0eSIsInByb2R1Y3RSZWNvcmQiLCJjeWNsZXNQZXJNaW51dGUiLCJjb21wdXRlRmxvdyIsImZvcm1EYXRhIiwiY29tcHV0ZUZhY2lsaXRpZXNOZWVkZWRDYXBhY2l0eSIsImNvbmZpZyIsImNhcGFjaXR5IiwicGFyc2VkIiwidiIsIml0ZW1GbG93cmF0ZSIsImN1cnJOZWVkZWQiLCJjb21wdXRlRmFjaWxpdGllc05lZWRlZENvbnN0cmFpbnQiLCJjb25zdHJhaW50IiwiY29tcHV0ZUZhY2lsaXRpZXNQZXJBcnJheSIsImZsb3dyYXRlIiwibWF0Qm90dGxlTmVjayIsImN1cnJCb3R0bGVOZWNrIiwicHJvZEJvdHRsZU5lY2siLCJjb21wdXRlUGxhY2VtZW50IiwiYXJyYXlzTmVlZGVkIiwibGVmdG92ZXJGYWNpbGl0aWVzIiwiY29tcHV0ZUlkbGVVc2FnZU1XUGVyRmFjaWxpdHkiLCJzb3J0ZXIiLCJ1c2FnZU1XIiwicGFyc2VkQ291bnQiLCJjb21wdXRlV29ya1VzYWdlTVdQZXJGYWNpbGl0eSIsInMiLCJjb21wdXRlUG93ZXJVc2FnZSIsIkZBQ0lMSVRZX0tFWSIsIlJFQ0lQRV9LRVkiLCJQUk9MSUZFUkFUT1JfS0VZIiwiU09SVEVSX0tFWSIsIkZMT1dSQVRFX0tFWSIsIlBST0xJRkVSQVRPUl9TUFJBWV9DT1VOVF9LRVkiLCJDT01QVVRFX01PREVfS0VZIiwiQ09OU1RSQUlOVF9LRVkiLCJDQVBBQ0lUWV9LRVkiLCJnZXRMb2NhbENvbXB1dGVGb3JtRGF0YSIsImdldExvY2FsQ29uZmlnRm9ybURhdGEiLCJjb21wdXRlTW9kZSIsImdldExvY2FsQ29tcHV0ZU1vZGUiLCJnZXRMb2NhbFJlY29yZCIsImNvbnN0cmFpbnRDb3JyZWN0ZWQiLCJjYXBhY2l0eUNvcnJlY3RlZCIsImdldExvY2FsRmFjaWxpdHkiLCJnZXRMb2NhbFJlY2lwZSIsImdldExvY2FsUHJvbGlmZXJhdG9yIiwicHJvbGlmZXJhdG9yU3ByYXlDb3VudCIsImdldExvY2FsUHJvbGlmZXJhdG9yU3ByYXlDb3VudCIsInNvcnRlckNvcnJlY3RlZCIsImZsb3dyYXRlQ29ycmVjdGVkIiwia2V5IiwianNvblN0cmluZyIsImpzb25PYmoiLCJ1c2VMYWJlbE9iamVjdCIsImluaXQiLCJzZXRJdGVtIiwidXNlUmVjb3JkIiwicHJldiIsImNvdW50VGFrZW5GbG93IiwicmVjIiwidG90YWxGbG93IiwidGFrZW5GbG93IiwidXNlRmxvd3JhdGUiLCJoYW5kbGVSZXBsYWNlIiwiaGFuZGxlUmVwbGFjZUZuIiwibGVmdG92ZXJGbG93IiwiY291bnRUYWtlblBvcnRzIiwidG90YWwiLCJjb3VudCIsInVzZVNvcnRlciIsInRvdGFsUG9ydHMiLCJ0YWtlblBvcnRzIiwibGVmdG92ZXJQb3J0cyIsInVzZVN0cmluZyIsInVzZUVkaXRvckZvcm0iLCJjb25maWdJbml0IiwiY29tcHV0ZUluaXQiLCJzZXRGYWNpbGl0eSIsInNldFJlY2lwZSIsInNldFNvcnRlciIsInNldFByb2xpZmVyYXRvciIsImhhbmRsZVByb2xpZmVyYXRvclNwcmF5Q291bnRDaGFuZ2UiLCJ1cGRhdGVGbG93cmF0ZSIsInNldEZsb3dyYXRlIiwiaGFuZGxlQ29uc3RyYWludFVwZGF0ZSIsImhhbmRsZUNvbnN0cmFpbnRDaGFuZ2UiLCJoYW5kbGVDYXBhY2l0eVVwZGF0ZSIsImhhbmRsZUNhcGFjaXR5Q2hhbmdlIiwiaGFuZGxlRmFjaWxpdHlDaGFuZ2UiLCJuZXh0RiIsIm5leHRSIiwiaGFuZGxlUmVjaXBlQ2hhbmdlIiwibmV4dFAiLCJuZXh0Rmxvd3JhdGUiLCJuZXh0Q29uc3RyYWludCIsIm5leHRDYXBhY2l0eSIsImNvbm5lY3Rpb25Db3VudCIsIml0ZW1MYWJlbCIsIkxheW91dCIsInVzZVRoZW1lIiwiaXNTbWFsbFNjcmVlbiIsInVzZU1lZGlhUXVlcnkiLCJzbG90TWFpbiIsInNsb3RTaWRlIiwiRWRpdG9yIiwiZmxvd0RhdGEiLCJwb3dlclVzYWdlRGF0YSIsInBsYWNlbWVudERhdGEiLCJjcmVhdGVUaGVtZSIsImFscGhhIiwiQXBwIiwiVGhlbWVQcm92aWRlciIsIkNzc0Jhc2VsaW5lIiwiY3JlYXRlUm9vdCIsIlN0cmljdE1vZGUiXSwibWFwcGluZ3MiOiIw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
